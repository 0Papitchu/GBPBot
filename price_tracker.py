import time
import logging
import csv
import os
from datetime import datetime, timedelta
from utils import (
    get_prices, calculate_fees, execute_trade, calculate_roi, send_profits_to_secure_wallet
)
from config import (
    ARBITRAGE_THRESHOLD, SLEEP_TIME, OPPORTUNITIES_CSV, TRADE_AMOUNT,
    MAX_WAIT_CONFIRMATION, PROFIT_TRANSFER_THRESHOLD, PROFIT_TRANSFER_PERCENTAGE
)

# Configuration du logger
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# V√©rifier si le fichier CSV existe et ajouter l'en-t√™te si n√©cessaire
if not os.path.isfile(OPPORTUNITIES_CSV):
    with open(OPPORTUNITIES_CSV, mode="w", newline="") as file:
        writer = csv.writer(file)
        writer.writerow([
            "Date", "Buy Exchange", "Sell Exchange", "Buy Price", "Sell Price",
            "Spread (%)", "Profit Brut (USDT)", "Frais Totaux (USDT)", "Profit Net (USDT)", "ROI (%)"
        ])

def load_recent_opportunities():
    """
    Charge les 20 derni√®res opportunit√©s pour √©viter les doublons.
    """
    recent_opportunities = []
    if os.path.isfile(OPPORTUNITIES_CSV):
        with open(OPPORTUNITIES_CSV, mode="r") as file:
            reader = list(csv.reader(file))
            data = reader[1:]  # Sauter l'en-t√™te
            for row in data[-20:]:  # On ne prend que les 20 derni√®res entr√©es
                try:
                    entry = {
                        "Date": datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S"),
                        "Buy Exchange": row[1],
                        "Sell Exchange": row[2],
                        "Buy Price": float(row[3]),
                        "Sell Price": float(row[4])
                    }
                    recent_opportunities.append(entry)
                except ValueError:
                    continue  # Ignorer les lignes corrompues
    return recent_opportunities

def is_duplicate_opportunity(buy_exchange, sell_exchange, buy_price, sell_price):
    """
    V√©rifie si une opportunit√© similaire a d√©j√† √©t√© d√©tect√©e r√©cemment.
    """
    recent_opportunities = load_recent_opportunities()
    now = datetime.now()
    for entry in recent_opportunities:
        if (
            entry["Buy Exchange"] == buy_exchange and
            entry["Sell Exchange"] == sell_exchange and
            abs(entry["Buy Price"] - buy_price) < 0.01 and
            abs(entry["Sell Price"] - sell_price) < 0.01 and
            (now - entry["Date"]) < timedelta(minutes=10)
        ):
            return True  # Opportunit√© d√©j√† d√©tect√©e r√©cemment
    return False

def log_arbitrage_opportunity(buy_exchange, sell_exchange, buy_price, sell_price, spread, profit_brut, frais_totaux, profit_net, roi):
    """
    Enregistre une opportunit√© d'arbitrage dans le CSV.
    """
    if is_duplicate_opportunity(buy_exchange, sell_exchange, buy_price, sell_price):
        logging.info("‚ö†Ô∏è Opportunit√© d√©j√† d√©tect√©e r√©cemment, non enregistr√©e.")
        return
    with open(OPPORTUNITIES_CSV, mode="a", newline="") as file:
        writer = csv.writer(file)
        writer.writerow([
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"), buy_exchange, sell_exchange,
            buy_price, sell_price, spread, profit_brut, frais_totaux, profit_net, roi
        ])
    logging.info(f"üìÇ Opportunit√© enregistr√©e dans {OPPORTUNITIES_CSV} ‚úÖ")

def find_arbitrage_opportunity(prices):
    """
    Identifie les opportunit√©s d'arbitrage en comparant les prix sur diff√©rents exchanges.
    """
    best_buy_exchange = min(prices, key=prices.get)
    best_sell_exchange = max(prices, key=prices.get)
    
    buy_price = prices[best_buy_exchange]
    sell_price = prices[best_sell_exchange]
    spread = ((sell_price - buy_price) / buy_price) * 100

    if spread >= ARBITRAGE_THRESHOLD:
        logging.info("\nüöÄ Opportunit√© d'arbitrage d√©tect√©e ! üöÄ")
        logging.info(f"Acheter sur {best_buy_exchange} √† {buy_price:.3f} USDT")
        logging.info(f"Vendre sur {best_sell_exchange} √† {sell_price:.3f} USDT")
        logging.info(f"√âcart potentiel : {spread:.2f}%")

        # Simulation de trade avec montant configurable
        simulate_trade(TRADE_AMOUNT, buy_price, sell_price, best_buy_exchange, best_sell_exchange, spread)
    else:
        logging.debug(f"üîç Aucune opportunit√© rentable d√©tect√©e. (√âcart : {spread:.2f}%)")

def simulate_trade(amount, buy_price, sell_price, buy_exchange, sell_exchange, spread):
    """
    Simule un trade d'arbitrage avec gestion automatique des profits.
    """
    gross_profit, total_fees, net_profit, roi = calculate_roi(amount, buy_price, sell_price, buy_exchange, sell_exchange)
    logging.info(f"\nüí∞ Simulation Trade ({amount} AVAX) üí∞")
    logging.info(f"Achat sur {buy_exchange} √† {buy_price:.3f} USDT")
    logging.info(f"Vente sur {sell_exchange} √† {sell_price:.3f} USDT")
    logging.info(f"Profit brut estim√© : {gross_profit:.3f} USDT")
    logging.info(f"Frais estim√©s : {total_fees:.3f} USDT")
    logging.info(f"Profit net apr√®s frais : {net_profit:.3f} USDT")
    logging.info(f"üìà ROI estim√© : {roi:.2f}%")

    # Enregistrer l'opportunit√©
    log_arbitrage_opportunity(buy_exchange, sell_exchange, buy_price, sell_price, spread, gross_profit, total_fees, net_profit, roi)

    # V√©rifier si le trade est rentable
    if net_profit > 0:
        logging.info("‚úÖ Trade RENTABLE d√©tect√©, EX√âCUTION...")
        execute_trade(amount, buy_exchange, sell_exchange, buy_price, sell_price, spread)

        # **üí∞ V√©rification des profits pour transfert automatique**
        if net_profit >= PROFIT_TRANSFER_THRESHOLD:
            transfer_amount = net_profit * (PROFIT_TRANSFER_PERCENTAGE / 100)
            logging.info(f"üîÑ Transfert automatique des profits ({transfer_amount:.3f} USDT) en cours...")
            send_profits_to_secure_wallet(transfer_amount)

if __name__ == "__main__":
    logging.info("üöÄ D√©marrage du bot d'arbitrage...\n")
    while True:
        try:
            prices = get_prices()
            find_arbitrage_opportunity(prices)
            time.sleep(SLEEP_TIME)
        except KeyboardInterrupt:
            logging.info("üõë Bot arr√™t√© manuellement.")
            break
        except Exception as e:
            logging.error(f"‚ö†Ô∏è Erreur inattendue : {e}")
