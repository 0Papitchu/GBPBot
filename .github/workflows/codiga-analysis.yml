name: Code Analysis

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * 1'  # Exécuter l'analyse complète tous les lundis à minuit

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Analyser tout l'historique pour un meilleur suivi
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-core.txt ]; then pip install -r requirements-core.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
          config-file: .github/codeql/codeql-config.yml
          setup-python-dependencies: true
      
      # Autobuild attempts to build any compiled languages
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:python"
  
  python-analysis:
    name: Python Static Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-core.txt ]; then pip install -r requirements-core.txt; fi
          pip install bandit pylint ruff safety
      
      - name: Run Bandit
        run: |
          mkdir -p reports
          bandit -r gbpbot -x venv,venv_310,venv_new,env -f sarif -o reports/bandit-results.sarif || true
      
      - name: Run Pylint
        run: |
          pylint --output-format=colorized gbpbot || true
      
      - name: Run Ruff
        run: |
          ruff check --output-format=github gbpbot || true
      
      - name: Run Safety
        run: |
          safety check -r requirements-core.txt --full-report || true
      
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: reports/bandit-results.sarif 