# Script d'analyse compl√®te pour GBPBot
# Ce script ex√©cute tous les outils d'analyse et importe les r√©sultats dans SonarQube

# Couleurs pour les messages
$Green = [System.ConsoleColor]::Green
$Cyan = [System.ConsoleColor]::Cyan
$Yellow = [System.ConsoleColor]::Yellow
$Red = [System.ConsoleColor]::Red

# V√©rifier si SonarQube est en cours d'ex√©cution
function Test-SonarQubeRunning {
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:9000/api/system/status" -UseBasicParsing -ErrorAction SilentlyContinue
        $status = $response.Content | ConvertFrom-Json
        return $status.status -eq "UP"
    } catch {
        return $false
    }
}

# Afficher un message de d√©but
Write-Host "`nüîç D√©marrage de l'analyse compl√®te pour GBPBot..." -ForegroundColor $Cyan

# √âtape 1: V√©rifier si SonarQube est en cours d'ex√©cution
Write-Host "`nüìã V√©rification de SonarQube..." -ForegroundColor $Cyan
if (-not (Test-SonarQubeRunning)) {
    Write-Host "‚ùå SonarQube n'est pas en cours d'ex√©cution. Veuillez d√©marrer SonarQube avant de continuer." -ForegroundColor $Red
    Write-Host "   Ex√©cutez StartSonar.bat dans le dossier bin\windows-x86-64 de votre installation SonarQube." -ForegroundColor $Yellow
    exit 1
} else {
    Write-Host "‚úÖ SonarQube est en cours d'ex√©cution" -ForegroundColor $Green
}

# √âtape 2: Ex√©cuter les tests avec couverture
Write-Host "`nüìã Ex√©cution des tests avec couverture..." -ForegroundColor $Cyan
try {
    pip install pytest pytest-cov -q
    pytest --cov=gbpbot --cov-report=xml:coverage.xml
    Write-Host "‚úÖ Tests ex√©cut√©s avec succ√®s" -ForegroundColor $Green
} catch {
    Write-Host "‚ö†Ô∏è Erreur lors de l'ex√©cution des tests. Continuons avec l'analyse..." -ForegroundColor $Yellow
}

# √âtape 3: Ex√©cuter l'analyse de s√©curit√©
Write-Host "`nüìã Ex√©cution de l'analyse de s√©curit√©..." -ForegroundColor $Cyan
try {
    & "$PSScriptRoot\run_security_analysis.ps1"
    Write-Host "‚úÖ Analyse de s√©curit√© termin√©e" -ForegroundColor $Green
} catch {
    Write-Host "‚ö†Ô∏è Erreur lors de l'analyse de s√©curit√©. Continuons avec SonarQube..." -ForegroundColor $Yellow
}

# √âtape 4: V√©rifier si SonarScanner est install√©
Write-Host "`nüìã V√©rification de SonarScanner..." -ForegroundColor $Cyan
$toolsDir = "tools"
$sonarScannerVersion = "4.8.0.2856"
$sonarScannerDir = "sonar-scanner-$sonarScannerVersion-windows"
$sonarScannerPath = Join-Path $toolsDir $sonarScannerDir

if (-not (Test-Path $sonarScannerPath)) {
    Write-Host "‚ö†Ô∏è SonarScanner n'est pas install√©. Installation en cours..." -ForegroundColor $Yellow
    & "$PSScriptRoot\setup_sonarqube.ps1"
} else {
    Write-Host "‚úÖ SonarScanner est install√©" -ForegroundColor $Green
}

# √âtape 5: Demander le token SonarQube
Write-Host "`nüìã Configuration de l'analyse SonarQube..." -ForegroundColor $Cyan
Write-Host "Veuillez entrer votre token SonarQube:" -ForegroundColor $Cyan
$sonarToken = Read-Host -Prompt "> "

if ([string]::IsNullOrWhiteSpace($sonarToken)) {
    Write-Host "‚ùå Token SonarQube non fourni. Impossible de continuer." -ForegroundColor $Red
    exit 1
}

# √âtape 6: Ex√©cuter l'analyse SonarQube
Write-Host "`nüìã Ex√©cution de l'analyse SonarQube..." -ForegroundColor $Cyan

# Ajouter SonarScanner au PATH temporairement
$env:Path += ";$sonarScannerPath\bin"

# Ex√©cuter SonarScanner
try {
    $sonarScannerCmd = "sonar-scanner.bat -D sonar.login=$sonarToken"
    Invoke-Expression $sonarScannerCmd
    Write-Host "‚úÖ Analyse SonarQube termin√©e" -ForegroundColor $Green
} catch {
    Write-Host "‚ùå Erreur lors de l'analyse SonarQube:" -ForegroundColor $Red
    Write-Host $_.Exception.Message -ForegroundColor $Red
    exit 1
}

# √âtape 7: Afficher les r√©sultats
Write-Host "`n‚úÖ Analyse compl√®te termin√©e!" -ForegroundColor $Green
Write-Host "üìä Consultez les r√©sultats sur http://localhost:9000/dashboard?id=GBPBot" -ForegroundColor $Cyan

# Ouvrir le dashboard dans le navigateur
Start-Process "http://localhost:9000/dashboard?id=GBPBot" 