from typing import Dict, List, Set, Optional, Union, Tuple
from loguru import logger
import asyncio
import time
from datetime import datetime, timedelta
import re
import json
from web3 import Web3
from web3.logs import DISCARD
import aiohttp
from collections import deque

from gbpbot.core.blockchain_factory import BlockchainFactory
from gbpbot.api_adapters.base_adapter import BaseAPIAdapter
from gbpbot.core.config import Config
from gbpbot.core.token_analyzer import TokenAnalyzer
from gbpbot.utils.events import EventEmitter

class TokenDetector:
    """
    Syst√®me avanc√© de d√©tection de nouveaux tokens sur plusieurs blockchains.
    """
    
    def __init__(self, config: Config):
        """
        Initialise le d√©tecteur de tokens
        
        Args:
            config: Configuration du d√©tecteur
        """
        self.config = config
        self.detection_config = config.get_config().get("detection", {})
        self.api_adapters = {}
        self.blockchains = {}
        self.event_emitter = EventEmitter()
        
        # Initialiser l'analyseur de tokens
        self.token_analyzer = TokenAnalyzer(config.get_config())
        
        # Liste des tokens d√©tect√©s (max 1000)
        self.detected_tokens = deque(maxlen=1000)
        
        # Ensembles pour suivre les tokens d√©j√† trait√©s
        self.processed_addresses = set()
        self.mempool_processed = set()
        self.blacklisted_addresses = set()
        
        # Timestamps pour les limites de requ√™tes
        self.last_factory_check = {}
        self.last_mempool_check = {}
        
        # Statistiques
        self.stats = {
            "tokens_detected": 0,
            "tokens_analyzed": 0,
            "tokens_accepted": 0,
            "tokens_rejected": 0,
            "honeypots_detected": 0,
            "detection_by_source": {
                "factory_events": 0,
                "mempool": 0,
                "api_feeds": 0,
                "pancakeswap": 0,
                "manual": 0
            },
            "last_detection_time": None,
            "average_detection_time": 0.0,
            "total_detection_time": 0.0
        }
        
        # Chargement de la configuration sp√©cifique
        self._load_config()
        
        logger.info(f"‚úÖ D√©tecteur de tokens initialis√©")
        
    def _load_config(self):
        """Charge la configuration sp√©cifique du d√©tecteur de tokens"""
        # Charger les tokens blacklist√©s
        token_filters = self.detection_config.get("filters", {})
        blacklist = token_filters.get("exclude_tokens", [])
        self.blacklisted_addresses = set(addr.lower() for addr in blacklist if addr)
        
        # Param√®tres de filtrage
        self.min_liquidity = token_filters.get("min_liquidity", 5000)
        self.exclude_stablecoins = token_filters.get("exclude_stablecoins", True)
        
        # M√©thodes de d√©tection activ√©es
        methods = self.detection_config.get("methods", {})
        self.detect_pancakeswap = methods.get("pancakeswap_new", True)
        self.detect_factory_events = methods.get("factory_events", True)
        self.detect_mempool = methods.get("mempool", True)
        self.use_api_feeds = methods.get("api_feeds", True)
        
        # Initialiser les blockchains et leur factory
        self._init_blockchains()
        
        # Initialiser les API si n√©cessaire
        if self.use_api_feeds:
            self._init_api_adapters()
            
        # Intervalle de v√©rification des usines et du mempool
        self.factory_interval = self.detection_config.get("factory_check_interval", 10)
        self.mempool_interval = self.detection_config.get("mempool_check_interval", 5)
        
    def _init_blockchains(self):
        """Initialise les connexions aux diff√©rentes blockchains"""
        blockchain_factory = BlockchainFactory(self.config)
        
        # Initialiser les blockchains en fonction de la configuration
        chains = self.config.get_config().get("rpc", {}).get("urls", {})
        for chain_name in chains:
            try:
                # Cr√©er un client pour chaque blockchain configur√©e
                client = blockchain_factory.get_blockchain_client(chain_name)
                if client:
                    self.blockchains[chain_name] = client
                    self.last_factory_check[chain_name] = 0
                    self.last_mempool_check[chain_name] = 0
                    logger.info(f"‚úÖ Blockchain {chain_name} initialis√©e pour la d√©tection de tokens")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de l'initialisation de la blockchain {chain_name}: {str(e)}")
                
    def _init_api_adapters(self):
        """Initialise les adaptateurs d'API externes"""
        api_configs = self.detection_config.get("external_apis", {})
        
        # V√©rifier si l'API Pump.fun est activ√©e
        pump_fun_config = api_configs.get("pump_fun", {})
        if pump_fun_config.get("enabled", False):
            try:
                from gbpbot.api_adapters.pump_fun_adapter import PumpFunAdapter
                self.api_adapters["pump_fun"] = PumpFunAdapter(pump_fun_config)
                logger.info("‚úÖ Adaptateur Pump.fun initialis√©")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de l'initialisation de l'adaptateur Pump.fun: {str(e)}")
                
        # V√©rifier si l'API Axiom Pro est activ√©e
        axiom_config = api_configs.get("axiom_pro", {})
        if axiom_config.get("enabled", False):
            try:
                from gbpbot.api_adapters.axiom_adapter import AxiomAdapter
                self.api_adapters["axiom_pro"] = AxiomAdapter(axiom_config)
                logger.info("‚úÖ Adaptateur Axiom Pro initialis√©")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de l'initialisation de l'adaptateur Axiom Pro: {str(e)}")
                
    async def start(self):
        """D√©marre la d√©tection de tokens sur toutes les sources configur√©es"""
        logger.info("üöÄ D√©marrage du d√©tecteur de tokens...")
        
        try:
            # Initialiser les adaptateurs d'API
            for name, adapter in self.api_adapters.items():
                await adapter.initialize()
                
            # Cr√©er les t√¢ches de d√©tection
            tasks = []
            
            # T√¢che pour les API externes
            if self.use_api_feeds and self.api_adapters:
                tasks.append(asyncio.create_task(self._api_detection_loop()))
                
            # T√¢che pour la d√©tection via les √©v√©nements de factory
            if self.detect_factory_events:
                for chain_name, blockchain in self.blockchains.items():
                    tasks.append(asyncio.create_task(
                        self._factory_events_detection_loop(chain_name, blockchain)))
                    
            # T√¢che pour la d√©tection via le mempool
            if self.detect_mempool:
                for chain_name, blockchain in self.blockchains.items():
                    tasks.append(asyncio.create_task(
                        self._mempool_detection_loop(chain_name, blockchain)))
                    
            # Attendre que toutes les t√¢ches se terminent (ne devrait jamais arriver)
            await asyncio.gather(*tasks)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du d√©marrage du d√©tecteur de tokens: {str(e)}")
            
    async def stop(self):
        """Arr√™te toutes les t√¢ches de d√©tection"""
        logger.info("üõë Arr√™t du d√©tecteur de tokens...")
        
        # Fermer les sessions HTTP des adaptateurs d'API
        for name, adapter in self.api_adapters.items():
            await adapter.close()
            
    async def _api_detection_loop(self):
        """Boucle de d√©tection via les API externes"""
        logger.info("üîç D√©marrage de la d√©tection via les API externes")
        
        while True:
            try:
                start_time = time.time()
                new_tokens_detected = 0
                
                # Interroger chaque adaptateur d'API
                for name, adapter in self.api_adapters.items():
                    try:
                        # R√©cup√©rer les nouveaux tokens
                        tokens = await adapter.get_new_tokens()
                        
                        if tokens:
                            logger.debug(f"üìä {len(tokens)} nouveaux tokens d√©tect√©s via {name}")
                            
                            # Traiter chaque token
                            for token_data in tokens:
                                token_chain = token_data.get("chain", "").lower()
                                token_address = token_data.get("address", "").lower()
                                
                                if (token_address and 
                                    token_chain in self.blockchains and
                                    token_address not in self.processed_addresses and
                                    token_address not in self.blacklisted_addresses):
                                    
                                    # Ajouter √† la liste des tokens trait√©s
                                    self.processed_addresses.add(token_address)
                                    
                                    # Analyser le token
                                    enriched_data = await self._enrich_token_data(token_data, token_chain)
                                    analysis_result = await self.token_analyzer.analyze_token(enriched_data)
                                    
                                    # Enregistrer le token et ses r√©sultats d'analyse
                                    token_record = {
                                        "address": token_address,
                                        "chain": token_chain,
                                        "name": token_data.get("name", "Unknown"),
                                        "symbol": token_data.get("symbol", "???"),
                                        "detection_time": datetime.now().isoformat(),
                                        "detection_source": name,
                                        "analysis_result": analysis_result,
                                        "data": enriched_data
                                    }
                                    
                                    # Ajouter √† la liste des tokens d√©tect√©s
                                    self.detected_tokens.append(token_record)
                                    
                                    # Mettre √† jour les statistiques
                                    self.stats["tokens_detected"] += 1
                                    self.stats["tokens_analyzed"] += 1
                                    self.stats["detection_by_source"]["api_feeds"] += 1
                                    self.stats["last_detection_time"] = datetime.now().isoformat()
                                    
                                    # Si l'analyse recommande d'acheter, √©mettre un √©v√©nement
                                    if analysis_result.get("recommendation") == "BUY":
                                        self.stats["tokens_accepted"] += 1
                                        self.event_emitter.emit("token_detected", token_record)
                                        logger.info(f"üí∞ Token int√©ressant d√©tect√©: {token_data.get('name')} ({token_data.get('symbol')}) sur {token_chain}")
                                    else:
                                        self.stats["tokens_rejected"] += 1
                                        
                                    new_tokens_detected += 1
                                    
                    except Exception as e:
                        logger.error(f"‚ùå Erreur lors de la d√©tection via {name}: {str(e)}")
                        
                # Mettre √† jour les statistiques de temps de d√©tection
                detection_time = time.time() - start_time
                self.stats["total_detection_time"] += detection_time
                if self.stats["tokens_detected"] > 0:
                    self.stats["average_detection_time"] = (
                        self.stats["total_detection_time"] / self.stats["tokens_detected"]
                    )
                    
                if new_tokens_detected > 0:
                    logger.info(f"üîç {new_tokens_detected} nouveaux tokens analys√©s via les API en {detection_time:.2f}s")
                    
                # Attendre avant la prochaine v√©rification
                # Utiliser des intervalles diff√©rents pour chaque adaptateur
                min_interval = min(
                    adapter.config.get("update_interval", 30) 
                    for adapter in self.api_adapters.values()
                )
                await asyncio.sleep(min_interval)
                
            except Exception as e:
                logger.error(f"‚ùå Erreur dans la boucle de d√©tection API: {str(e)}")
                await asyncio.sleep(30)  # Attendre avant de r√©essayer
                
    async def _factory_events_detection_loop(self, chain_name: str, blockchain):
        """
        Boucle de d√©tection via les √©v√©nements de factory
        
        Args:
            chain_name: Nom de la blockchain
            blockchain: Client de la blockchain
        """
        logger.info(f"üîç D√©marrage de la d√©tection via les √©v√©nements de factory sur {chain_name}")
        
        # Obtenir les adresses de factory de la configuration pour cette cha√Æne
        dex_config = self.config.get_config().get("dex", {})
        factory_addresses = dex_config.get("factory_addresses", {})
        
        if not factory_addresses:
            logger.warning(f"‚ö†Ô∏è Aucune adresse de factory configur√©e pour {chain_name}, d√©sactivation de la d√©tection par √©v√©nements")
            return
            
        while True:
            try:
                now = time.time()
                # V√©rifier si le temps √©coul√© depuis la derni√®re v√©rification est suffisant
                if now - self.last_factory_check.get(chain_name, 0) < self.factory_interval:
                    await asyncio.sleep(1)
                    continue
                    
                self.last_factory_check[chain_name] = now
                new_tokens_detected = 0
                start_time = time.time()
                
                # Pour chaque factory configur√©e
                for dex_name, factory_address in factory_addresses.items():
                    try:
                        # Obtenir les derniers √©v√©nements de cr√©ation de paire
                        events = await blockchain.get_pair_creation_events(factory_address)
                        
                        if events:
                            logger.debug(f"üìä {len(events)} √©v√©nements de cr√©ation de paire d√©tect√©s sur {dex_name} ({chain_name})")
                            
                            # Traiter chaque √©v√©nement
                            for event in events:
                                # Extraire les adresses de tokens de l'√©v√©nement
                                token0 = event.get("token0", "").lower()
                                token1 = event.get("token1", "").lower()
                                pair_address = event.get("pair", "").lower()
                                
                                # V√©rifier les tokens qui ne sont pas encore trait√©s
                                for token_address in [token0, token1]:
                                    if (token_address and 
                                        token_address not in self.processed_addresses and
                                        token_address not in self.blacklisted_addresses):
                                        
                                        # Ajouter √† la liste des tokens trait√©s
                                        self.processed_addresses.add(token_address)
                                        
                                        # Obtenir les informations du token
                                        token_data = await blockchain.get_token_info(token_address)
                                        
                                        if token_data:
                                            # Enrichir les donn√©es du token
                                            token_data["pair_address"] = pair_address
                                            token_data["dex"] = dex_name
                                            token_data["chain"] = chain_name
                                            token_data["address"] = token_address
                                            
                                            # Analyser le token
                                            enriched_data = await self._enrich_token_data(token_data, chain_name)
                                            analysis_result = await self.token_analyzer.analyze_token(enriched_data)
                                            
                                            # Enregistrer le token et ses r√©sultats d'analyse
                                            token_record = {
                                                "address": token_address,
                                                "chain": chain_name,
                                                "name": token_data.get("name", "Unknown"),
                                                "symbol": token_data.get("symbol", "???"),
                                                "detection_time": datetime.now().isoformat(),
                                                "detection_source": f"factory_{dex_name}",
                                                "analysis_result": analysis_result,
                                                "data": enriched_data
                                            }
                                            
                                            # Ajouter √† la liste des tokens d√©tect√©s
                                            self.detected_tokens.append(token_record)
                                            
                                            # Mettre √† jour les statistiques
                                            self.stats["tokens_detected"] += 1
                                            self.stats["tokens_analyzed"] += 1
                                            self.stats["detection_by_source"]["factory_events"] += 1
                                            self.stats["last_detection_time"] = datetime.now().isoformat()
                                            
                                            # Si l'analyse recommande d'acheter, √©mettre un √©v√©nement
                                            if analysis_result.get("recommendation") == "BUY":
                                                self.stats["tokens_accepted"] += 1
                                                self.event_emitter.emit("token_detected", token_record)
                                                logger.info(f"üí∞ Token int√©ressant d√©tect√© via factory: {token_data.get('name')} ({token_data.get('symbol')}) sur {chain_name}")
                                            else:
                                                self.stats["tokens_rejected"] += 1
                                                
                                            new_tokens_detected += 1
                                    
                    except Exception as e:
                        logger.error(f"‚ùå Erreur lors de la d√©tection via {dex_name} sur {chain_name}: {str(e)}")
                        
                # Mettre √† jour les statistiques de temps de d√©tection
                detection_time = time.time() - start_time
                self.stats["total_detection_time"] += detection_time
                if self.stats["tokens_detected"] > 0:
                    self.stats["average_detection_time"] = (
                        self.stats["total_detection_time"] / self.stats["tokens_detected"]
                    )
                    
                if new_tokens_detected > 0:
                    logger.info(f"üîç {new_tokens_detected} nouveaux tokens analys√©s via factory sur {chain_name} en {detection_time:.2f}s")
                    
                # Attendre avant la prochaine v√©rification
                await asyncio.sleep(self.factory_interval)
                
            except Exception as e:
                logger.error(f"‚ùå Erreur dans la boucle de d√©tection factory sur {chain_name}: {str(e)}")
                await asyncio.sleep(30)  # Attendre avant de r√©essayer
                
    async def _mempool_detection_loop(self, chain_name: str, blockchain):
        """
        Boucle de d√©tection via le mempool
        
        Args:
            chain_name: Nom de la blockchain
            blockchain: Client de la blockchain
        """
        logger.info(f"üîç D√©marrage de la d√©tection via le mempool sur {chain_name}")
        
        # V√©rifier si la blockchain supporte la surveillance du mempool
        if not hasattr(blockchain, "monitor_mempool") or not callable(getattr(blockchain, "monitor_mempool")):
            logger.warning(f"‚ö†Ô∏è La blockchain {chain_name} ne supporte pas la surveillance du mempool, d√©sactivation")
            return
            
        try:
            # D√©marrer la surveillance du mempool
            await blockchain.monitor_mempool(callback=self._mempool_callback)
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du d√©marrage de la surveillance du mempool sur {chain_name}: {str(e)}")
            
    async def _mempool_callback(self, chain_name: str, tx_data: Dict):
        """
        Callback pour traiter les transactions du mempool
        
        Args:
            chain_name: Nom de la blockchain
            tx_data: Donn√©es de la transaction
        """
        try:
            # Extraire l'ID de la transaction
            tx_hash = tx_data.get("hash", "").lower()
            
            # V√©rifier si la transaction a d√©j√† √©t√© trait√©e
            if tx_hash in self.mempool_processed:
                return
                
            self.mempool_processed.add(tx_hash)
            
            # Limiter la taille de l'ensemble des transactions trait√©es
            if len(self.mempool_processed) > 10000:
                self.mempool_processed = set(list(self.mempool_processed)[-5000:])
                
            # Analyser la transaction pour d√©tecter les interactions avec les routers et factories
            blockchain = self.blockchains.get(chain_name)
            if not blockchain:
                return
                
            # V√©rifier si c'est une cr√©ation de paire ou une interaction avec un router
            is_pair_creation, token_address = await blockchain.analyze_transaction(tx_data)
            
            if is_pair_creation and token_address:
                token_address = token_address.lower()
                
                # V√©rifier si le token a d√©j√† √©t√© trait√©
                if (token_address in self.processed_addresses or 
                    token_address in self.blacklisted_addresses):
                    return
                    
                # Ajouter √† la liste des tokens trait√©s
                self.processed_addresses.add(token_address)
                
                # Obtenir les informations du token
                token_data = await blockchain.get_token_info(token_address)
                
                if token_data:
                    token_data["chain"] = chain_name
                    token_data["address"] = token_address
                    token_data["tx_hash"] = tx_hash
                    
                    # Analyser le token
                    enriched_data = await self._enrich_token_data(token_data, chain_name)
                    analysis_result = await self.token_analyzer.analyze_token(enriched_data)
                    
                    # Enregistrer le token et ses r√©sultats d'analyse
                    token_record = {
                        "address": token_address,
                        "chain": chain_name,
                        "name": token_data.get("name", "Unknown"),
                        "symbol": token_data.get("symbol", "???"),
                        "detection_time": datetime.now().isoformat(),
                        "detection_source": "mempool",
                        "analysis_result": analysis_result,
                        "data": enriched_data
                    }
                    
                    # Ajouter √† la liste des tokens d√©tect√©s
                    self.detected_tokens.append(token_record)
                    
                    # Mettre √† jour les statistiques
                    self.stats["tokens_detected"] += 1
                    self.stats["tokens_analyzed"] += 1
                    self.stats["detection_by_source"]["mempool"] += 1
                    self.stats["last_detection_time"] = datetime.now().isoformat()
                    
                    # Si l'analyse recommande d'acheter, √©mettre un √©v√©nement
                    if analysis_result.get("recommendation") == "BUY":
                        self.stats["tokens_accepted"] += 1
                        self.event_emitter.emit("token_detected", token_record)
                        logger.info(f"üí∞ Token int√©ressant d√©tect√© via mempool: {token_data.get('name')} ({token_data.get('symbol')}) sur {chain_name}")
                    else:
                        self.stats["tokens_rejected"] += 1
                        
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du traitement d'une transaction du mempool: {str(e)}")
            
    async def _enrich_token_data(self, token_data: Dict, chain_name: str) -> Dict:
        """
        Enrichit les donn√©es d'un token avec des informations suppl√©mentaires
        
        Args:
            token_data: Donn√©es du token
            chain_name: Nom de la blockchain
            
        Returns:
            Dict: Donn√©es enrichies du token
        """
        try:
            # Cr√©er une copie des donn√©es pour ne pas modifier l'original
            enriched_data = token_data.copy()
            
            # Obtenir le client blockchain correspondant
            blockchain = self.blockchains.get(chain_name)
            if not blockchain:
                return enriched_data
                
            token_address = token_data.get("address", "").lower()
            if not token_address:
                return enriched_data
                
            # Ajouter des informations manquantes si n√©cessaire
            if "name" not in enriched_data or "symbol" not in enriched_data:
                basic_info = await blockchain.get_token_basic_info(token_address)
                enriched_data.update(basic_info)
                
            # V√©rifier et ajouter la liquidit√©
            if "liquidity" not in enriched_data:
                liquidity = await blockchain.get_token_liquidity(token_address)
                enriched_data["liquidity"] = liquidity
                
            # V√©rifier le volume si absent
            if "volume_24h" not in enriched_data:
                volume = await blockchain.get_token_volume(token_address, period=86400)  # 24h en secondes
                enriched_data["volume_24h"] = volume
                
            # Ajouter des donn√©es de prix si absentes
            if "price" not in enriched_data:
                price = await blockchain.get_token_price(token_address)
                enriched_data["price"] = price
                
            # V√©rifier le honeypot si configur√©
            if self.config.get_config().get("sniping", {}).get("honeypot_check", True):
                is_honeypot, honeypot_info = await blockchain.check_honeypot(token_address)
                enriched_data["is_honeypot"] = is_honeypot
                enriched_data["honeypot_info"] = honeypot_info
                
                if is_honeypot:
                    self.stats["honeypots_detected"] += 1
                    
            # V√©rifier les informations sociales via les adaptateurs d'API si disponibles
            for name, adapter in self.api_adapters.items():
                if hasattr(adapter, "get_token_info") and callable(getattr(adapter, "get_token_info")):
                    try:
                        api_token_info = await adapter.get_token_info(token_address, chain=chain_name)
                        if api_token_info:
                            # Fusionner certains champs mais ne pas √©craser les donn√©es existantes
                            for key in ["website", "twitter", "telegram", "description", "verified"]:
                                if key in api_token_info and key not in enriched_data:
                                    enriched_data[key] = api_token_info[key]
                                    
                            # Ajouter les donn√©es de chart si disponibles
                            if "chart_data" in api_token_info and "chart_data" not in enriched_data:
                                enriched_data["chart_data"] = api_token_info["chart_data"]
                    except Exception as e:
                        logger.debug(f"‚ö†Ô∏è Impossible d'obtenir les infos de {name} pour {token_address}: {str(e)}")
                        
            return enriched_data
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'enrichissement des donn√©es pour {token_data.get('address', 'unknown')}: {str(e)}")
            return token_data
            
    def get_statistics(self) -> Dict:
        """
        R√©cup√®re les statistiques de d√©tection
        
        Returns:
            Dict: Statistiques de d√©tection
        """
        return self.stats
        
    def get_detected_tokens(self, limit: int = 50) -> List[Dict]:
        """
        R√©cup√®re la liste des tokens d√©tect√©s
        
        Args:
            limit: Nombre maximum de tokens √† retourner
            
        Returns:
            List[Dict]: Liste des tokens d√©tect√©s
        """
        return list(self.detected_tokens)[-limit:]
        
    def reset_statistics(self):
        """R√©initialise les statistiques de d√©tection"""
        self.stats = {
            "tokens_detected": 0,
            "tokens_analyzed": 0,
            "tokens_accepted": 0,
            "tokens_rejected": 0,
            "honeypots_detected": 0,
            "detection_by_source": {
                "factory_events": 0,
                "mempool": 0,
                "api_feeds": 0,
                "pancakeswap": 0,
                "manual": 0
            },
            "last_detection_time": None,
            "average_detection_time": 0.0,
            "total_detection_time": 0.0
        }
        
    def manually_add_token(self, chain_name: str, token_address: str) -> Dict:
        """
        Ajoute manuellement un token pour analyse
        
        Args:
            chain_name: Nom de la blockchain
            token_address: Adresse du token
            
        Returns:
            Dict: R√©sultat de l'op√©ration
        """
        token_address = token_address.lower()
        
        # V√©rifier si le token est d√©j√† trait√©
        if token_address in self.processed_addresses:
            return {
                "success": False,
                "message": "Ce token a d√©j√† √©t√© d√©tect√© et analys√©"
            }
            
        # V√©rifier si le token est blacklist√©
        if token_address in self.blacklisted_addresses:
            return {
                "success": False,
                "message": "Ce token est dans la liste noire"
            }
            
        # V√©rifier si la blockchain est support√©e
        blockchain = self.blockchains.get(chain_name)
        if not blockchain:
            return {
                "success": False,
                "message": f"La blockchain {chain_name} n'est pas support√©e"
            }
            
        # Ajouter la t√¢che d'analyse
        asyncio.create_task(self._analyze_manual_token(chain_name, token_address))
        
        return {
            "success": True,
            "message": f"Token {token_address} ajout√© pour analyse sur {chain_name}"
        }
        
    async def _analyze_manual_token(self, chain_name: str, token_address: str):
        """
        Analyse un token ajout√© manuellement
        
        Args:
            chain_name: Nom de la blockchain
            token_address: Adresse du token
        """
        try:
            # Obtenir le client blockchain
            blockchain = self.blockchains.get(chain_name)
            if not blockchain:
                return
                
            # Ajouter √† la liste des tokens trait√©s
            self.processed_addresses.add(token_address)
            
            # Obtenir les informations du token
            token_data = await blockchain.get_token_info(token_address)
            
            if token_data:
                token_data["chain"] = chain_name
                token_data["address"] = token_address
                
                # Analyser le token
                enriched_data = await self._enrich_token_data(token_data, chain_name)
                analysis_result = await self.token_analyzer.analyze_token(enriched_data)
                
                # Enregistrer le token et ses r√©sultats d'analyse
                token_record = {
                    "address": token_address,
                    "chain": chain_name,
                    "name": token_data.get("name", "Unknown"),
                    "symbol": token_data.get("symbol", "???"),
                    "detection_time": datetime.now().isoformat(),
                    "detection_source": "manual",
                    "analysis_result": analysis_result,
                    "data": enriched_data
                }
                
                # Ajouter √† la liste des tokens d√©tect√©s
                self.detected_tokens.append(token_record)
                
                # Mettre √† jour les statistiques
                self.stats["tokens_detected"] += 1
                self.stats["tokens_analyzed"] += 1
                self.stats["detection_by_source"]["manual"] += 1
                self.stats["last_detection_time"] = datetime.now().isoformat()
                
                # Si l'analyse recommande d'acheter, √©mettre un √©v√©nement
                if analysis_result.get("recommendation") == "BUY":
                    self.stats["tokens_accepted"] += 1
                    self.event_emitter.emit("token_detected", token_record)
                    logger.info(f"üí∞ Token int√©ressant d√©tect√© manuellement: {token_data.get('name')} ({token_data.get('symbol')}) sur {chain_name}")
                else:
                    self.stats["tokens_rejected"] += 1
                    logger.info(f"‚ùå Token rejet√© par l'analyse: {token_data.get('name')} ({token_data.get('symbol')}) sur {chain_name}")
                    
                return token_record
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'analyse manuelle du token {token_address}: {str(e)}")
            
    def add_event_listener(self, event_name: str, callback):
        """
        Ajoute un √©couteur d'√©v√©nements
        
        Args:
            event_name: Nom de l'√©v√©nement
            callback: Fonction de callback
        """
        self.event_emitter.on(event_name, callback)
        
    def remove_event_listener(self, event_name: str, callback):
        """
        Supprime un √©couteur d'√©v√©nements
        
        Args:
            event_name: Nom de l'√©v√©nement
            callback: Fonction de callback
        """
        self.event_emitter.off(event_name, callback) 