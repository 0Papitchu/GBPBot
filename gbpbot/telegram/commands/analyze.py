"""
Module de commandes d'analyse pour le bot Telegram
==================================================

Ce module impl√©mente les commandes pour l'analyse du march√© et des tokens sp√©cifiques
via l'interface Telegram du GBPBot.
"""

import asyncio
import logging
from typing import Dict, List, Any, Optional, Tuple, Union
import traceback
from datetime import datetime
import json

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackContext, CommandHandler, CallbackQueryHandler

# Logger
logger = logging.getLogger("gbpbot.telegram.commands.analyze")

# Importation conditionnelle des modules d'IA et d'analyse
try:
    from gbpbot.ai import create_market_intelligence, get_prompt_manager
    from gbpbot.ai.market_analyzer import MarketAnalyzer
    MARKET_ANALYZER_AVAILABLE = True
except ImportError:
    MARKET_ANALYZER_AVAILABLE = False
    logger.warning("Module MarketAnalyzer non disponible")

try:
    from gbpbot.ai.token_analyzer import TokenAnalyzer
    TOKEN_ANALYZER_AVAILABLE = True
except ImportError:
    TOKEN_ANALYZER_AVAILABLE = False
    logger.warning("Module TokenAnalyzer non disponible")

# Commande /analyze_market - Analyse le march√© crypto actuel
async def analyze_market_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Analyse le march√© crypto actuel et fournit des insights.
    Usage: /analyze_market [options]
    Options: --detailed, --focus=solana, --time=24h
    """
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # V√©rifier l'autorisation
    if hasattr(context.bot_data.get('bot'), '_is_user_authorized'):
        if not context.bot_data.get('bot')._is_user_authorized(user.id):
            await update.message.reply_text("‚õî Vous n'√™tes pas autoris√© √† utiliser cette commande.")
            return
    
    # V√©rifier si le module d'analyse est disponible
    if not MARKET_ANALYZER_AVAILABLE:
        await update.message.reply_text(
            "‚ùå <b>Module d'analyse de march√© non disponible</b>\n\n"
            "Cette fonctionnalit√© n√©cessite l'installation du module MarketAnalyzer.",
            parse_mode="HTML"
        )
        return
    
    # Message de processing
    processing_message = await update.message.reply_text(
        "üîç <b>Analyse du march√© en cours...</b>\n\n"
        "Veuillez patienter pendant que j'analyse les tendances actuelles du march√©.",
        parse_mode="HTML"
    )
    
    # Extraire les options
    options = {}
    detailed = False
    focus = "global"
    time_period = "24h"
    
    if context.args:
        for arg in context.args:
            if arg == "--detailed":
                detailed = True
                options["detailed"] = True
            elif arg.startswith("--focus="):
                focus = arg.split("=")[1].lower()
                options["focus"] = focus
            elif arg.startswith("--time="):
                time_period = arg.split("=")[1].lower()
                options["time_period"] = time_period
    
    try:
        # Cr√©er le module d'analyse de march√©
        market_analyzer = MarketAnalyzer(context.bot_data.get('bot_state', {}))
        
        # Ex√©cuter l'analyse
        result = await market_analyzer.analyze_market(
            focus=focus,
            time_period=time_period,
            detailed=detailed
        )
        
        # Formater la r√©ponse
        if result and "analysis" in result:
            analysis = result["analysis"]
            market_trend = result.get("market_trend", "neutral")
            
            # Emoji pour la tendance
            trend_emoji = "üü¢" if market_trend == "bullish" else "üî¥" if market_trend == "bearish" else "‚ö™"
            
            # Construire le message
            message = f"{trend_emoji} <b>Analyse du March√© Crypto</b>\n\n"
            
            # Informations principales
            message += f"<b>Tendance:</b> {market_trend.title()}\n"
            message += f"<b>Focus:</b> {focus.title()}\n"
            message += f"<b>P√©riode:</b> {time_period}\n\n"
            
            # Analyse d√©taill√©e
            message += f"<b>Analyse:</b>\n{analysis}\n\n"
            
            # Opportunit√©s d√©tect√©es
            if "opportunities" in result and result["opportunities"]:
                message += "<b>Opportunit√©s D√©tect√©es:</b>\n"
                for opp in result["opportunities"]:
                    message += f"‚Ä¢ {opp['name']} ({opp['symbol']}): {opp['reason']}\n"
            
            # Risques d√©tect√©s
            if "risks" in result and result["risks"]:
                message += "\n<b>Risques D√©tect√©s:</b>\n"
                for risk in result["risks"]:
                    message += f"‚Ä¢ {risk['description']}\n"
            
            # Source des donn√©es
            message += f"\n<i>Analyse g√©n√©r√©e le {datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')}</i>"
            
            # Boutons pour actions suppl√©mentaires
            keyboard = [
                [InlineKeyboardButton("üìä Vue D√©taill√©e", callback_data=f"analyze_market_detailed_{focus}_{time_period}")],
                [InlineKeyboardButton("üí∞ Opportunit√©s d'Arbitrage", callback_data="analyze_arbitrage")],
                [InlineKeyboardButton("üöÄ Tokens Prometteurs", callback_data="analyze_promising_tokens")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Envoyer la r√©ponse et supprimer le message de processing
            await processing_message.delete()
            await update.message.reply_text(message, parse_mode="HTML", reply_markup=reply_markup)
        else:
            await processing_message.delete()
            await update.message.reply_text(
                "‚ùå <b>Erreur lors de l'analyse du march√©</b>\n\n"
                "Aucun r√©sultat d'analyse n'a √©t√© obtenu. Veuillez r√©essayer plus tard.",
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"Erreur lors de l'analyse du march√©: {str(e)}")
        traceback.print_exc()
        await processing_message.delete()
        await update.message.reply_text(
            f"‚ùå <b>Erreur lors de l'analyse du march√©</b>\n\n"
            f"D√©tails: {str(e)}",
            parse_mode="HTML"
        )

# Commande /analyze_token - Analyse un token sp√©cifique
async def analyze_token_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Analyse un token sp√©cifique et fournit des insights.
    Usage: /analyze_token <token_symbol_ou_adresse> [options]
    Options: --detailed, --risk, --chain=solana
    """
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # V√©rifier l'autorisation
    if hasattr(context.bot_data.get('bot'), '_is_user_authorized'):
        if not context.bot_data.get('bot')._is_user_authorized(user.id):
            await update.message.reply_text("‚õî Vous n'√™tes pas autoris√© √† utiliser cette commande.")
            return
    
    # V√©rifier si le module d'analyse est disponible
    if not TOKEN_ANALYZER_AVAILABLE:
        await update.message.reply_text(
            "‚ùå <b>Module d'analyse de token non disponible</b>\n\n"
            "Cette fonctionnalit√© n√©cessite l'installation du module TokenAnalyzer.",
            parse_mode="HTML"
        )
        return
    
    # V√©rifier si un token a √©t√© sp√©cifi√©
    if not context.args or len(context.args) < 1:
        await update.message.reply_text(
            "‚ÑπÔ∏è <b>Token non sp√©cifi√©</b>\n\n"
            "Usage: <code>/analyze_token &lt;token_symbol_ou_adresse&gt;</code>\n\n"
            "Exemples:\n"
            "‚Ä¢ <code>/analyze_token SOL</code>\n"
            "‚Ä¢ <code>/analyze_token 0x1234...abcd</code>\n"
            "‚Ä¢ <code>/analyze_token SOL --detailed --chain=solana</code>",
            parse_mode="HTML"
        )
        return
    
    # Extraire le token et les options
    token_identifier = context.args[0]
    options = {}
    detailed = False
    risk_analysis = False
    chain = "solana"  # Par d√©faut
    
    if len(context.args) > 1:
        for arg in context.args[1:]:
            if arg == "--detailed":
                detailed = True
                options["detailed"] = True
            elif arg == "--risk":
                risk_analysis = True
                options["risk_analysis"] = True
            elif arg.startswith("--chain="):
                chain = arg.split("=")[1].lower()
                options["chain"] = chain
    
    # Message de processing
    processing_message = await update.message.reply_text(
        f"üîç <b>Analyse du token {token_identifier} en cours...</b>\n\n"
        f"Veuillez patienter pendant que j'analyse ce token sur {chain.title()}.",
        parse_mode="HTML"
    )
    
    try:
        # Cr√©er le module d'analyse de token
        token_analyzer = TokenAnalyzer(context.bot_data.get('bot_state', {}))
        
        # Ex√©cuter l'analyse
        result = await token_analyzer.analyze_token(
            token_identifier,
            chain=chain,
            detailed=detailed,
            risk_analysis=risk_analysis
        )
        
        # Formater la r√©ponse
        if result and "token_info" in result:
            token_info = result["token_info"]
            risk_score = result.get("risk_score", 0)
            
            # Determiner l'emoji de risque
            risk_emoji = "üü¢" if risk_score < 30 else "üü†" if risk_score < 70 else "üî¥"
            
            # Construire le message
            message = f"ü™ô <b>Analyse du Token: {token_info.get('name', token_identifier)}</b>\n\n"
            
            # Informations principales
            message += f"<b>Symbole:</b> {token_info.get('symbol', 'N/A')}\n"
            message += f"<b>Blockchain:</b> {chain.title()}\n"
            if "address" in token_info:
                address = token_info["address"]
                # Tronquer l'adresse si elle est trop longue
                if len(address) > 16:
                    address = f"{address[:8]}...{address[-8:]}"
                message += f"<b>Adresse:</b> <code>{address}</code>\n"
            message += f"<b>Prix:</b> {token_info.get('price', 'N/A')} USD\n"
            
            # Variation de prix
            if "price_change_24h" in token_info:
                change_24h = token_info["price_change_24h"]
                change_emoji = "üìà" if change_24h > 0 else "üìâ" if change_24h < 0 else "‚û°Ô∏è"
                message += f"<b>Variation 24h:</b> {change_emoji} {change_24h:.2f}%\n"
            
            # Capitalisation et liquidit√©
            if "market_cap" in token_info:
                message += f"<b>Capitalisation:</b> {token_info['market_cap']:,} USD\n"
            if "liquidity" in token_info:
                message += f"<b>Liquidit√©:</b> {token_info['liquidity']:,} USD\n"
            
            # Risque
            message += f"\n{risk_emoji} <b>Score de Risque:</b> {risk_score}/100\n"
            
            # Analyse d√©taill√©e
            if "analysis" in result:
                message += f"\n<b>Analyse:</b>\n{result['analysis']}\n"
            
            # Indicateurs techniques
            if "technical_indicators" in result and result["technical_indicators"]:
                message += "\n<b>Indicateurs Techniques:</b>\n"
                indicators = result["technical_indicators"]
                message += f"‚Ä¢ RSI: {indicators.get('rsi', 'N/A')}\n"
                message += f"‚Ä¢ MACD: {indicators.get('macd', 'N/A')}\n"
                message += f"‚Ä¢ Tendance: {indicators.get('trend', 'N/A')}\n"
            
            # Risques sp√©cifiques
            if risk_analysis and "risks" in result and result["risks"]:
                message += "\n<b>Risques D√©tect√©s:</b>\n"
                for risk in result["risks"]:
                    message += f"‚Ä¢ {risk['description']} ({risk['severity']})\n"
            
            # Recommandation
            if "recommendation" in result:
                message += f"\n<b>Recommandation:</b> {result['recommendation']}\n"
            
            # Source des donn√©es
            message += f"\n<i>Analyse g√©n√©r√©e le {datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')}</i>"
            
            # Boutons pour actions suppl√©mentaires
            keyboard = [
                [InlineKeyboardButton("üìä Graphique", callback_data=f"token_chart_{token_info.get('symbol', token_identifier)}_{chain}")],
                [InlineKeyboardButton("üîç Analyse des Risques", callback_data=f"token_risk_{token_info.get('symbol', token_identifier)}_{chain}")],
                [InlineKeyboardButton("üí∞ Opportunit√©s", callback_data=f"token_opportunities_{token_info.get('symbol', token_identifier)}_{chain}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Envoyer la r√©ponse et supprimer le message de processing
            await processing_message.delete()
            await update.message.reply_text(message, parse_mode="HTML", reply_markup=reply_markup)
        else:
            await processing_message.delete()
            await update.message.reply_text(
                f"‚ùå <b>Erreur lors de l'analyse du token {token_identifier}</b>\n\n"
                "Aucune information n'a √©t√© trouv√©e pour ce token. V√©rifiez l'identifiant ou l'adresse du token.",
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"Erreur lors de l'analyse du token: {str(e)}")
        traceback.print_exc()
        await processing_message.delete()
        await update.message.reply_text(
            f"‚ùå <b>Erreur lors de l'analyse du token {token_identifier}</b>\n\n"
            f"D√©tails: {str(e)}",
            parse_mode="HTML"
        )

# Commande /list_trending - Liste les tokens en tendance
async def list_trending_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Liste les tokens en tendance actuellement.
    Usage: /list_trending [options]
    Options: --chain=solana, --limit=10
    """
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # V√©rifier l'autorisation
    if hasattr(context.bot_data.get('bot'), '_is_user_authorized'):
        if not context.bot_data.get('bot')._is_user_authorized(user.id):
            await update.message.reply_text("‚õî Vous n'√™tes pas autoris√© √† utiliser cette commande.")
            return
    
    # V√©rifier si le module d'analyse est disponible
    if not MARKET_ANALYZER_AVAILABLE:
        await update.message.reply_text(
            "‚ùå <b>Module d'analyse de march√© non disponible</b>\n\n"
            "Cette fonctionnalit√© n√©cessite l'installation du module MarketAnalyzer.",
            parse_mode="HTML"
        )
        return
    
    # Extraire les options
    chain = "all"
    limit = 10
    
    if context.args:
        for arg in context.args:
            if arg.startswith("--chain="):
                chain = arg.split("=")[1].lower()
            elif arg.startswith("--limit="):
                try:
                    limit = int(arg.split("=")[1])
                    limit = max(1, min(limit, 20))  # Limiter entre 1 et 20
                except ValueError:
                    pass
    
    # Message de processing
    processing_message = await update.message.reply_text(
        f"üîç <b>Recherche des tokens en tendance...</b>\n\n"
        f"Veuillez patienter pendant que je recherche les {limit} tokens les plus en tendance"
        f"{' sur ' + chain.title() if chain != 'all' else ''}.",
        parse_mode="HTML"
    )
    
    try:
        # Cr√©er le module d'analyse de march√©
        market_analyzer = MarketAnalyzer(context.bot_data.get('bot_state', {}))
        
        # R√©cup√©rer les tokens en tendance
        trending_tokens = await market_analyzer.get_trending_tokens(chain=chain, limit=limit)
        
        if trending_tokens and len(trending_tokens) > 0:
            # Construire le message
            message = f"üî• <b>Top {len(trending_tokens)} Tokens en Tendance</b>"
            message += f"{' sur ' + chain.title() if chain != 'all' else ''}\n\n"
            
            # Lister les tokens
            for i, token in enumerate(trending_tokens, 1):
                price_change = token.get("price_change_24h", 0)
                change_emoji = "üìà" if price_change > 0 else "üìâ" if price_change < 0 else "‚û°Ô∏è"
                volume = token.get("volume_24h", 0)
                
                message += (
                    f"{i}. <b>{token.get('name', 'Inconnu')}</b> ({token.get('symbol', 'N/A')})\n"
                    f"   üí≤ Prix: {token.get('price', 'N/A')} USD\n"
                    f"   {change_emoji} 24h: {price_change:+.2f}%\n"
                    f"   üí∞ Volume: {volume:,.0f} USD\n"
                )
                
                # Ajouter un s√©parateur entre les tokens sauf pour le dernier
                if i < len(trending_tokens):
                    message += "\n"
            
            # Source des donn√©es
            message += f"\n<i>Donn√©es actualis√©es le {datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')}</i>"
            
            # Boutons pour actions suppl√©mentaires
            keyboard = []
            chains = ["all", "solana", "avax", "sonic"]
            chain_buttons = []
            
            for c in chains:
                if c != chain:  # Ne pas afficher la cha√Æne actuelle
                    emoji = "üîÑ" if c == "all" else "‚ö°" if c == "solana" else "üî∫" if c == "avax" else "üîä"
                    chain_buttons.append(InlineKeyboardButton(f"{emoji} {c.title()}", callback_data=f"trending_tokens_{c}_{limit}"))
            
            # Diviser les boutons en rang√©es de 3 maximum
            for i in range(0, len(chain_buttons), 3):
                keyboard.append(chain_buttons[i:i+3])
            
            # Ajouter un bouton pour analyser un token sp√©cifique
            keyboard.append([InlineKeyboardButton("üîç Analyser un token...", callback_data="analyze_token_prompt")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Envoyer la r√©ponse et supprimer le message de processing
            await processing_message.delete()
            await update.message.reply_text(message, parse_mode="HTML", reply_markup=reply_markup)
        else:
            await processing_message.delete()
            await update.message.reply_text(
                "‚ùå <b>Aucun token en tendance trouv√©</b>\n\n"
                "Aucune information n'a pu √™tre r√©cup√©r√©e. Veuillez r√©essayer plus tard ou v√©rifier vos param√®tres.",
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des tokens en tendance: {str(e)}")
        traceback.print_exc()
        await processing_message.delete()
        await update.message.reply_text(
            "‚ùå <b>Erreur lors de la r√©cup√©ration des tokens en tendance</b>\n\n"
            f"D√©tails: {str(e)}",
            parse_mode="HTML"
        )

# Gestionnaire pour les callbacks li√©s aux analyses
async def analyze_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    G√®re les callbacks des boutons li√©s aux analyses.
    """
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # V√©rifier l'autorisation
    if hasattr(context.bot_data.get('bot'), '_is_user_authorized'):
        if not context.bot_data.get('bot')._is_user_authorized(user.id):
            await query.edit_message_text("‚õî Vous n'√™tes pas autoris√© √† utiliser cette fonction.")
            return
    
    # Traiter la callback data
    callback_data = query.data
    
    if callback_data.startswith("analyze_market_detailed_"):
        # Format: analyze_market_detailed_<focus>_<time_period>
        parts = callback_data.split("_")
        if len(parts) >= 4:
            focus = parts[3]
            time_period = parts[4] if len(parts) > 4 else "24h"
            
            # Message de processing
            await query.edit_message_text(
                "üîç <b>G√©n√©ration de l'analyse d√©taill√©e en cours...</b>\n\n"
                "Veuillez patienter pendant que je pr√©pare une analyse approfondie.",
                parse_mode="HTML"
            )
            
            try:
                # Cr√©er le module d'analyse de march√© avec l'option d√©taill√©e
                market_analyzer = MarketAnalyzer(context.bot_data.get('bot_state', {}))
                result = await market_analyzer.analyze_market(
                    focus=focus,
                    time_period=time_period,
                    detailed=True
                )
                
                if result and "analysis" in result:
                    # Formater la r√©ponse d√©taill√©e
                    # (code de formatage similaire √† la commande de base, mais avec plus de d√©tails)
                    detailed_analysis = result.get("detailed_analysis", result["analysis"])
                    
                    message = f"üìä <b>Analyse D√©taill√©e du March√© ({focus.title()})</b>\n\n"
                    message += f"{detailed_analysis}\n\n"
                    
                    # Ajouter des statistiques suppl√©mentaires
                    if "stats" in result:
                        stats = result["stats"]
                        message += "<b>Statistiques de March√©:</b>\n"
                        for key, value in stats.items():
                            message += f"‚Ä¢ {key}: {value}\n"
                    
                    # Ajouter plus d'informations sur les opportunit√©s et risques
                    # (code similaire √† la commande de base, mais avec plus de d√©tails)
                    
                    # Bouton pour revenir √† l'analyse normale
                    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è Retour", callback_data=f"analyze_market_basic_{focus}_{time_period}")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await query.edit_message_text(message, parse_mode="HTML", reply_markup=reply_markup)
                else:
                    await query.edit_message_text(
                        "‚ùå <b>Erreur lors de l'analyse d√©taill√©e du march√©</b>\n\n"
                        "Aucun r√©sultat d'analyse n'a √©t√© obtenu. Veuillez r√©essayer plus tard.",
                        parse_mode="HTML"
                    )
            except Exception as e:
                logger.error(f"Erreur lors de l'analyse d√©taill√©e du march√©: {str(e)}")
                traceback.print_exc()
                await query.edit_message_text(
                    "‚ùå <b>Erreur lors de l'analyse d√©taill√©e du march√©</b>\n\n"
                    f"D√©tails: {str(e)}",
                    parse_mode="HTML"
                )
    
    elif callback_data.startswith("analyze_token_prompt"):
        # Demander √† l'utilisateur de sp√©cifier un token √† analyser
        message = (
            "üîç <b>Analyse de Token</b>\n\n"
            "Pour analyser un token, utilisez la commande:\n"
            "<code>/analyze_token &lt;symbole_ou_adresse&gt;</code>\n\n"
            "Exemples:\n"
            "‚Ä¢ <code>/analyze_token SOL</code>\n"
            "‚Ä¢ <code>/analyze_token 0x1234...abcd</code>\n"
            "‚Ä¢ <code>/analyze_token SOL --detailed --chain=solana</code>"
        )
        await query.edit_message_text(message, parse_mode="HTML")
    
    elif callback_data.startswith("token_chart_"):
        # Format: token_chart_<symbol>_<chain>
        parts = callback_data.split("_")
        if len(parts) >= 3:
            symbol = parts[2]
            chain = parts[3] if len(parts) > 3 else "solana"
            
            # Message de processing
            await query.edit_message_text(
                f"üìä <b>G√©n√©ration du graphique pour {symbol}...</b>\n\n"
                "Veuillez patienter pendant que je pr√©pare le graphique.",
                parse_mode="HTML"
            )
            
            try:
                # Cette fonctionnalit√© n√©cessiterait d'envoyer une image de graphique
                # Comme Telegram ne peut pas afficher d'images directement dans les messages √©dit√©s,
                # On pourrait soit envoyer un nouveau message avec l'image, soit rediriger vers un graphique en ligne
                
                # Pour l'instant, simulons cette fonctionnalit√© avec un message d'information
                message = (
                    f"üìä <b>Graphique pour {symbol}</b>\n\n"
                    f"Le graphique pour {symbol} sur {chain.title()} serait affich√© ici.\n\n"
                    f"Pour voir le graphique en ligne, vous pouvez visiter:\n"
                )
                
                # Liens vers des graphiques selon la blockchain
                if chain.lower() == "solana":
                    message += f"‚Ä¢ <a href='https://dexscreener.com/solana/{symbol.lower()}'>DexScreener</a>\n"
                    message += f"‚Ä¢ <a href='https://birdeye.so/token/{symbol.lower()}?chain=solana'>Birdeye</a>"
                elif chain.lower() == "avax":
                    message += f"‚Ä¢ <a href='https://dexscreener.com/avalanche/{symbol.lower()}'>DexScreener</a>\n"
                    message += f"‚Ä¢ <a href='https://traderjoe.xyz/avalanche/trade/v2/{symbol.lower()}'>TraderJoe</a>"
                else:
                    message += f"‚Ä¢ <a href='https://dexscreener.com/search/{symbol.lower()}'>DexScreener</a>\n"
                
                # Bouton pour revenir √† l'analyse du token
                keyboard = [[InlineKeyboardButton("‚óÄÔ∏è Retour √† l'analyse", callback_data=f"analyze_token_{symbol}_{chain}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(message, parse_mode="HTML", reply_markup=reply_markup, disable_web_page_preview=True)
            except Exception as e:
                logger.error(f"Erreur lors de la g√©n√©ration du graphique: {str(e)}")
                traceback.print_exc()
                await query.edit_message_text(
                    f"‚ùå <b>Erreur lors de la g√©n√©ration du graphique pour {symbol}</b>\n\n"
                    f"D√©tails: {str(e)}",
                    parse_mode="HTML"
                )
    
    elif callback_data.startswith("trending_tokens_"):
        # Format: trending_tokens_<chain>_<limit>
        parts = callback_data.split("_")
        if len(parts) >= 3:
            chain = parts[2]
            limit = int(parts[3]) if len(parts) > 3 and parts[3].isdigit() else 10
            
            # Message de processing
            await query.edit_message_text(
                f"üîç <b>Recherche des tokens en tendance...</b>\n\n"
                f"Veuillez patienter pendant que je recherche les {limit} tokens les plus en tendance"
                f"{' sur ' + chain.title() if chain != 'all' else ''}.",
                parse_mode="HTML"
            )
            
            try:
                # Cr√©er le module d'analyse de march√©
                market_analyzer = MarketAnalyzer(context.bot_data.get('bot_state', {}))
                
                # R√©cup√©rer les tokens en tendance
                trending_tokens = await market_analyzer.get_trending_tokens(chain=chain, limit=limit)
                
                # Le reste du code est similaire √† la commande list_trending_command
                # (formater la r√©ponse, ajouter les boutons, etc.)
                
                # Pour √©viter les duplications, on pourrait extraire ce code dans une fonction s√©par√©e
                # qui serait utilis√©e √† la fois par la commande et par le callback
            except Exception as e:
                logger.error(f"Erreur lors de la r√©cup√©ration des tokens en tendance: {str(e)}")
                traceback.print_exc()
                await query.edit_message_text(
                    "‚ùå <b>Erreur lors de la r√©cup√©ration des tokens en tendance</b>\n\n"
                    f"D√©tails: {str(e)}",
                    parse_mode="HTML"
                )

# Fonction pour enregistrer les gestionnaires de commandes
def register_analyze_command_handlers(application):
    """
    Enregistre les gestionnaires de commandes li√©es aux analyses.
    """
    application.add_handler(CommandHandler("analyze_market", analyze_market_command))
    application.add_handler(CommandHandler("analyze_token", analyze_token_command))
    application.add_handler(CommandHandler("list_trending", list_trending_command))
    
    # Gestionnaire pour les callbacks des boutons
    application.add_handler(CallbackQueryHandler(
        analyze_button_callback, 
        pattern="^(analyze_market_|token_chart_|token_risk_|token_opportunities_|analyze_token_|trending_tokens_)"
    )) 