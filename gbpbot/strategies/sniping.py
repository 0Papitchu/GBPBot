from typing import Dict, List, Optional, Tuple
import asyncio
from loguru import logger
from web3 import Web3
import time
from datetime import datetime
import json
import requests

from gbpbot.core.blockchain import BlockchainClient
from gbpbot.core.price_feed import PriceManager
from gbpbot.core.performance_tracker import PerformanceTracker
from gbpbot.config.trading_config import TradingConfig

from typing import FixtureFunction

from typing import FixtureFunction
# Variables utilis√©es dans les fixtures
status = None
base_token = None
token_address = None
dex_name = None
take_profit_price = None
stop_loss_price = None
router_address = None
exit_time = None
exit_tx_hash = None
exit_reason = None

from typing import FixtureFunction

from typing import FixtureFunction
# Variables utilis√©es dans les fixtures
status = None
base_token = None
token_address = None
dex_name = None
take_profit_price = None
stop_loss_price = None
router_address = None
exit_time = None
exit_tx_hash = None
exit_reason = None
# Variables utilis√©es dans les fixtures
status = None
base_token = None
token_address = None
dex_name = None
take_profit_price = None
stop_loss_price = None
router_address = None
exit_time = None
exit_tx_hash = None
exit_reason = None

from typing import FixtureFunction

from typing import FixtureFunction
# Variables utilis√©es dans les fixtures
status = None
base_token = None
token_address = None
dex_name = None
take_profit_price = None
stop_loss_price = None
router_address = None
exit_time = None
exit_tx_hash = None
exit_reason = None

from typing import FixtureFunction

from typing import FixtureFunction
# Variables utilis√©es dans les fixtures
status = None
base_token = None
token_address = None
dex_name = None
take_profit_price = None
stop_loss_price = None
router_address = None
exit_time = None
exit_tx_hash = None
exit_reason = None
# Variables utilis√©es dans les fixtures
status = None
base_token = None
token_address = None
dex_name = None
take_profit_price = None
stop_loss_price = None
router_address = None
exit_time = None
exit_tx_hash = None
exit_reason = None
# Variables utilis√©es dans les fixtures
status = None
base_token = None
token_address = None
dex_name = None
take_profit_price = None
stop_loss_price = None
router_address = None
exit_time = None
exit_tx_hash = None
exit_reason = None

class SnipingStrategy:
    """Strat√©gie de sniping pour d√©tecter et acheter les nouveaux tokens d√®s leur listing"""
    
    def __init__(self, blockchain: BlockchainClient):
        """
        Initialise la strat√©gie de sniping
        
        Args:
            blockchain: Instance du client blockchain
        """
        self.blockchain = blockchain
        self.web3 = blockchain.web3
        self.price_feed = PriceManager(self.web3)
        self.performance_tracker = PerformanceTracker()
        
        # Charger la configuration
        self.config = self._load_config()
        
        # Cache des tokens d√©j√† d√©tect√©s
        self.detected_tokens = set()
        
        # Transactions en cours
        self.active_snipes = {}
        
        # Abonnement aux √©v√©nements blockchain
        self.event_filters = {}
        
        logger.info("‚úÖ Strat√©gie de sniping initialis√©e")
    
    def _load_config(self) -> Dict:
        """Charge la configuration de sniping"""
        # Utiliser la configuration sp√©cifique au sniping
        config = TradingConfig.get_sniping_config()
        
        # V√©rifier si une configuration "tokens" existe et la fusionner 
        # avec la configuration de sniping si disponible
        try:
            # On recherche d'abord dans le fichier de configuration principal
            from gbpbot.config.config_loader import ConfigLoader
            main_config = ConfigLoader.get_config()
            
            if "tokens" in main_config:
                # Ajouter les informations sur les tokens
                if "tokens" not in config:
                    config["tokens"] = {}
                    
                config["tokens"].update(main_config["tokens"])
                logger.info("‚úÖ Configuration des tokens charg√©e avec succ√®s")
            else:
                logger.warning("‚ö†Ô∏è Section de configuration non trouv√©e: tokens")
                
            # V√©rifier si la configuration de sniping existe aussi dans le fichier principal
            if "sniping" in main_config:
                # Fusionner les configurations (priorit√© au fichier de configuration)
                for section, section_config in main_config["sniping"].items():
                    if section in config:
                        config[section].update(section_config)
                    else:
                        config[section] = section_config
                logger.info("‚úÖ Configuration de sniping personnalis√©e charg√©e avec succ√®s")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors du chargement de la configuration: {str(e)}")
            logger.warning("‚ö†Ô∏è Utilisation de la configuration par d√©faut")
            
        return config
    
    async def start_monitoring(self):
        """D√©marre le monitoring des nouveaux tokens"""
        logger.info("üîç D√©marrage du monitoring des nouveaux tokens")
        
        # Configurer les filtres d'√©v√©nements pour les factory des DEX
        await self._setup_event_filters()
        
        # Boucle principale de monitoring
        while True:
            try:
                # V√©rifier les nouveaux tokens sur TraderJoe
                await self._check_new_pairs(self.config["trader_joe_factory"], "trader_joe")
                
                # V√©rifier les nouveaux tokens sur Pangolin
                await self._check_new_pairs(self.config["pangolin_factory"], "pangolin")
                
                # G√©rer les snipes actifs (stop loss, take profit)
                await self._manage_active_snipes()
                
                # Attendre avant la prochaine it√©ration
                await asyncio.sleep(5)  # V√©rifier toutes les 5 secondes
                
            except Exception as e:
                logger.error(f"‚ùå Erreur dans la boucle de sniping: {str(e)}")
                await asyncio.sleep(5)  # Attendre avant de r√©essayer
    
    async def _setup_event_filters(self):
        """Configure les filtres d'√©v√©nements pour les factory des DEX"""
        factory_abi = self._load_factory_abi()
        
        try:
            # R√©cup√©rer les adresses des factories depuis la configuration
            factory_addresses = self.config["detection"]["factory_addresses"]
            
            for dex_name, factory_address in factory_addresses.items():
                logger.info(f"üîç Configuration du filtre d'√©v√©nements pour {dex_name}")
                factory_contract = self.web3.eth.contract(address=factory_address, abi=factory_abi)
                
                # Cr√©er un filtre pour l'√©v√©nement PairCreated
                self.event_filters[dex_name] = factory_contract.events.PairCreated.create_filter(fromBlock='latest')
                
                # Lancer une t√¢che asynchrone pour v√©rifier les nouvelles paires
                asyncio.create_task(self._check_new_pairs(factory_address, dex_name))
                
            logger.info(f"‚úÖ {len(factory_addresses)} filtres d'√©v√©nements configur√©s")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la configuration des filtres d'√©v√©nements: {str(e)}")
            # R√©essayer avec des valeurs par d√©faut si la configuration √©choue
            default_factories = {
                "trader_joe": "0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10",
                "pangolin": "0xefa94DE7a4656D787667C749f7E1223D71E9FD88"
            }
            
            logger.info("‚ö†Ô∏è Utilisation des adresses de factory par d√©faut")
            
            for dex_name, factory_address in default_factories.items():
                logger.info(f"üîç Configuration du filtre d'√©v√©nements pour {dex_name} (d√©faut)")
                factory_contract = self.web3.eth.contract(address=factory_address, abi=factory_abi)
                
                # Cr√©er un filtre pour l'√©v√©nement PairCreated
                self.event_filters[dex_name] = factory_contract.events.PairCreated.create_filter(fromBlock='latest')
                
                # Lancer une t√¢che asynchrone pour v√©rifier les nouvelles paires
                asyncio.create_task(self._check_new_pairs(factory_address, dex_name))
    
    def _load_factory_abi(self) -> List:
        """Charge l'ABI du factory"""
        # TODO: Charger l'ABI depuis un fichier
        # Pour l'instant, utiliser un ABI minimal
        return [
            {
                "anonymous": False,
                "inputs": [
                    {"indexed": True, "name": "token0", "type": "address"},
                    {"indexed": True, "name": "token1", "type": "address"},
                    {"indexed": False, "name": "pair", "type": "address"},
                    {"indexed": False, "name": "param", "type": "uint256"}
                ],
                "name": "PairCreated",
                "type": "event"
            }
        ]
    
    async def _check_new_pairs(self, factory_address: str, dex_name: str):
        """
        V√©rifie les nouveaux pairs sur un DEX
        
        Args:
            factory_address: Adresse du factory
            dex_name: Nom du DEX
        """
        try:
            # R√©cup√©rer les nouveaux √©v√©nements
            events = self.event_filters[dex_name].get_new_entries()
            
            for event in events:
                token0 = event.args.token0
                token1 = event.args.token1
                pair_address = event.args.pair
                
                # V√©rifier si l'un des tokens est WAVAX
                wavax_address = self.blockchain.token_addresses["WAVAX"]
                
                if token0 == wavax_address:
                    new_token = token1
                    base_token = token0
                elif token1 == wavax_address:
                    new_token = token0
                    base_token = token1
                else:
                    # Ignorer les paires qui ne contiennent pas WAVAX
                    continue
                
                # V√©rifier si le token a d√©j√† √©t√© d√©tect√©
                if new_token in self.detected_tokens:
                    continue
                
                # Ajouter le token √† la liste des tokens d√©tect√©s
                self.detected_tokens.add(new_token)
                
                logger.info(f"üîî Nouveau token d√©tect√© sur {dex_name}: {new_token}")
                
                # Analyser le token
                asyncio.create_task(self._analyze_token(new_token, base_token, pair_address, dex_name))
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la v√©rification des nouveaux pairs sur {dex_name}: {str(e)}")
    
    async def _analyze_token(self, token_address: str, base_token: str, pair_address: str, dex_name: str):
        """
        Analyse un nouveau token d√©tect√©
        
        Args:
            token_address: Adresse du token
            base_token: Adresse du token de base (WAVAX, WETH, etc.)
            pair_address: Adresse de la paire de liquidit√©
            dex_name: Nom du DEX o√π le token a √©t√© d√©tect√©
        """
        logger.info(f"üîç Analyse du token {token_address} sur {dex_name}")
        
        # V√©rifier si le token est d√©j√† dans la liste des tokens d√©tect√©s
        if token_address in self.detected_tokens:
            logger.info(f"‚è© Token {token_address} d√©j√† d√©tect√©, ignor√©")
            return
            
        # Ajouter le token √† la liste des tokens d√©tect√©s
        self.detected_tokens.add(token_address)
        
        # V√©rifier si le token est un honeypot
        is_honeypot, honeypot_info = await self._check_honeypot(token_address)
        if is_honeypot:
            logger.warning(f"‚ö†Ô∏è Token {token_address} d√©tect√© comme honeypot: {honeypot_info}")
            return
            
        # V√©rifier la liquidit√©
        liquidity = await self._check_liquidity(pair_address)
        min_liquidity = Web3.to_wei(self.config["detection"]["min_liquidity"], "ether")
        
        if liquidity < min_liquidity:
            logger.info(f"‚ö†Ô∏è Liquidit√© insuffisante pour {token_address}: {Web3.from_wei(liquidity, 'ether')} AVAX")
            return
            
        # V√©rifier si la liquidit√© est verrouill√©e
        is_locked, lock_info = await self._check_liquidity_lock(pair_address)
        min_locked_percent = self.config["detection"]["min_locked_liquidity_percent"]
        min_locked_time = self.config["detection"]["min_locked_time"]
        
        if not is_locked:
            logger.warning(f"‚ö†Ô∏è Liquidit√© non verrouill√©e pour {token_address}")
            return
            
        if lock_info["percent"] < min_locked_percent:
            logger.warning(f"‚ö†Ô∏è Pourcentage de liquidit√© verrouill√©e insuffisant: {lock_info['percent']}%")
            return
            
        if lock_info["time"] < min_locked_time:
            logger.warning(f"‚ö†Ô∏è Dur√©e de verrouillage insuffisante: {lock_info['time'] / 86400} jours")
            return
            
        # V√©rifier les taxes
        buy_tax, sell_tax = await self._check_taxes(token_address)
        max_buy_tax = self.config["detection"]["max_buy_tax"]
        max_sell_tax = self.config["detection"]["max_sell_tax"]
        
        if buy_tax > max_buy_tax:
            logger.warning(f"‚ö†Ô∏è Taxe d'achat trop √©lev√©e: {buy_tax}%")
            return
            
        if sell_tax > max_sell_tax:
            logger.warning(f"‚ö†Ô∏è Taxe de vente trop √©lev√©e: {sell_tax}%")
            return
            
        # Si toutes les v√©rifications sont pass√©es, ex√©cuter le snipe
        logger.info(f"‚úÖ Token {token_address} valid√©, ex√©cution du snipe")
        await self._execute_snipe(token_address, base_token, dex_name)
    
    async def _check_honeypot(self, token_address: str) -> Tuple[bool, str]:
        """
        V√©rifie si un token est un honeypot
        
        Args:
            token_address: Adresse du token √† v√©rifier
            
        Returns:
            (bool, str): (Est un honeypot, Raison)
        """
        try:
            api_url = self.config["detection"]["honeypot_checker_api"]
            chain_id = self.blockchain.network_config["chain_id"]
            
            # Appel √† l'API de v√©rification
            response = requests.get(f"{api_url}?address={token_address}&chainID={chain_id}")
            
            if response.status_code == 200:
                result = response.json()
                
                if result.get("IsHoneypot", False):
                    return True, result.get("Error", "Token identifi√© comme honeypot")
                else:
                    return False, "Token v√©rifi√©, pas de honeypot d√©tect√©"
            else:
                # En cas d'erreur de l'API, on consid√®re que le token n'est pas un honeypot
                logger.warning(f"‚ö†Ô∏è Erreur lors de la v√©rification du honeypot: {response.status_code}")
                return False, "Impossible de v√©rifier le honeypot"
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la v√©rification du honeypot: {str(e)}")
            return False, f"Erreur: {str(e)}"
    
    async def _check_liquidity(self, pair_address: str) -> int:
        """
        V√©rifie la liquidit√© d'une paire
        
        Args:
            pair_address: Adresse de la paire
            
        Returns:
            Liquidit√© en wei
        """
        # TODO: Impl√©menter la v√©rification de la liquidit√©
        # Pour l'instant, retourner une valeur al√©atoire pour le d√©veloppement
        import random
        return Web3.to_wei(random.uniform(1, 10), "ether")
    
    async def _check_liquidity_lock(self, pair_address: str) -> Tuple[bool, Dict]:
        """
        V√©rifie si la liquidit√© est bloqu√©e
        
        Args:
            pair_address: Adresse de la paire
            
        Returns:
            Tuple (is_locked, lock_info)
        """
        # TODO: Impl√©menter la v√©rification du lock de liquidit√©
        # Pour l'instant, retourner une valeur al√©atoire pour le d√©veloppement
        import random
        is_locked = random.random() < 0.7  # 70% de chance d'√™tre locked
        
        if is_locked:
            lock_info = {
                "percent_locked": random.uniform(80, 100),
                "lock_time": random.randint(30, 365) * 24 * 60 * 60,  # Entre 30 et 365 jours
                "locker": "0x000000000000000000000000000000000000dEaD"
            }
            return True, lock_info
        else:
            return False, {}
    
    async def _check_taxes(self, token_address: str) -> Tuple[float, float]:
        """
        V√©rifie les taxes d'un token
        
        Args:
            token_address: Adresse du token
            
        Returns:
            Tuple (buy_tax, sell_tax) en pourcentage
        """
        # TODO: Impl√©menter la v√©rification des taxes
        # Pour l'instant, retourner une valeur al√©atoire pour le d√©veloppement
        import random
        buy_tax = random.uniform(0, 15)
        sell_tax = random.uniform(0, 15)
        
        return buy_tax, sell_tax
    
    async def _execute_snipe(self, token_address: str, base_token: str, dex_name: str):
        """
        Ex√©cute un snipe sur un token
        
        Args:
            token_address: Adresse du token √† sniper
            base_token: Adresse du token de base (WAVAX, WETH, etc.)
            dex_name: Nom du DEX o√π effectuer le snipe
        """
        try:
            # V√©rifier si on n'a pas d√©j√† trop de snipes actifs
            if len(self.active_snipes) >= self.config["execution"]["max_active_snipes"]:
                logger.warning(f"‚ö†Ô∏è Nombre maximum de snipes actifs atteint ({len(self.active_snipes)})")
                return
                
            # R√©cup√©rer l'adresse du router
            router_address = self._get_router_address(dex_name)
            
            # Montant √† investir
            amount_in = self.config["execution"]["initial_buy_amount"]
            
            # Priorit√© du gas
            gas_priority = self.config["execution"]["gas_priority"]
            
            # Pr√©parer la transaction de swap
            swap_tx = await self._prepare_swap_transaction(
                token_in=base_token,
                token_out=token_address,
                amount_in=amount_in,
                router_address=router_address
            )
            
            if not swap_tx:
                logger.error(f"‚ùå Impossible de pr√©parer la transaction pour {token_address}")
                return
                
            # Envoyer la transaction
            logger.info(f"üöÄ Ex√©cution du snipe pour {token_address} avec {amount_in} AVAX")
            
            tx_hash = await self.blockchain.send_transaction(
                swap_tx,
                priority=gas_priority
            )
            
            # R√©cup√©rer les d√©tails de la transaction
            tx_receipt = await self.blockchain.wait_for_transaction(tx_hash)
            
            if tx_receipt["status"] == 1:
                logger.success(f"‚úÖ Snipe r√©ussi pour {token_address}!")
                
                # Calculer le prix d'entr√©e
                entry_price = await self.price_feed.get_token_price(token_address, base_token)
                
                # Enregistrer le snipe actif
                snipe_id = token_address
                self.active_snipes[snipe_id] = {
                    "token_address": token_address,
                    "base_token": base_token,
                    "dex_name": dex_name,
                    "amount_in": amount_in,
                    "entry_price": entry_price,
                    "entry_time": datetime.now(),
                    "tx_hash": tx_hash.hex(),
                    "router_address": router_address,
                    "take_profit_price": entry_price * (1 + self.config["risk_management"]["take_profit"] / 100),
                    "stop_loss_price": entry_price * (1 + self.config["risk_management"]["stop_loss"] / 100),
                    "trailing_active": False,
                    "highest_price": entry_price
                }
                
                # Lancer le suivi du snipe
                asyncio.create_task(self._manage_active_snipes())
            else:
                logger.error(f"‚ùå Snipe √©chou√© pour {token_address}")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'ex√©cution du snipe pour {token_address}: {str(e)}")
    
    def _get_router_address(self, dex_name: str) -> str:
        """
        Retourne l'adresse du routeur pour un DEX donn√©
        
        Args:
            dex_name: Nom du DEX
            
        Returns:
            Adresse du routeur
        """
        if dex_name == "trader_joe":
            return "0x60aE616a2155Ee3d9A68541Ba4544862310933d4"
        elif dex_name == "pangolin":
            return "0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106"
        else:
            raise ValueError(f"DEX inconnu: {dex_name}")
    
    async def _manage_active_snipes(self):
        """G√®re les snipes actifs (take profit, stop loss)"""
        if not self.active_snipes:
            return
            
        logger.info(f"üëÄ Gestion de {len(self.active_snipes)} snipes actifs")
        
        # Liste des snipes √† cl√¥turer
        snipes_to_close = []
        
        # V√©rifier chaque snipe actif
        for snipe_id, snipe in self.active_snipes.items():
            try:
                token_address = snipe["token_address"]
                base_token = snipe["base_token"]
                
                # R√©cup√©rer le prix actuel
                current_price = await self.price_feed.get_token_price(token_address, base_token)
                
                if not current_price:
                    logger.warning(f"‚ö†Ô∏è Impossible d'obtenir le prix pour {token_address}")
                    continue
                
                # Calculer le profit en pourcentage
                entry_price = snipe["entry_price"]
                profit_percent = ((current_price - entry_price) / entry_price) * 100
                
                logger.info(f"üìä {token_address}: Prix actuel = {current_price}, Profit = {profit_percent:.2f}%")
                
                # Mettre √† jour le prix le plus haut si n√©cessaire
                if current_price > snipe["highest_price"]:
                    snipe["highest_price"] = current_price
                    logger.info(f"üìà Nouveau prix le plus haut pour {token_address}: {current_price}")
                
                # Gestion du trailing stop
                if self.config["risk_management"]["trailing_stop"]:
                    trailing_percent = self.config["risk_management"]["trailing_percent"]
                    
                    # Si le profit d√©passe le take profit, activer le trailing stop si ce n'est pas d√©j√† fait
                    if profit_percent >= self.config["risk_management"]["take_profit"] and not snipe["trailing_active"]:
                        snipe["trailing_active"] = True
                        logger.info(f"üîÑ Activation du trailing stop pour {token_address}")
                    
                    # Si le trailing stop est actif, ajuster le stop loss
                    if snipe["trailing_active"]:
                        # Calculer le nouveau stop loss bas√© sur le prix le plus haut
                        trailing_stop_price = snipe["highest_price"] * (1 - trailing_percent / 100)
                        
                        # Ne mettre √† jour le stop loss que s'il est plus √©lev√©
                        if trailing_stop_price > snipe["stop_loss_price"]:
                            snipe["stop_loss_price"] = trailing_stop_price
                            logger.info(f"üîÑ Ajustement du trailing stop pour {token_address}: {trailing_stop_price}")
                
                # V√©rifier take profit (seulement si le trailing stop n'est pas actif)
                if not snipe["trailing_active"] and current_price >= snipe["take_profit_price"]:
                    logger.success(f"üí∞ Take profit atteint pour {token_address} (profit: {profit_percent:.2f}%)")
                    snipes_to_close.append((snipe_id, "take_profit"))
                    continue
                
                # V√©rifier stop loss
                if current_price <= snipe["stop_loss_price"]:
                    if snipe["trailing_active"]:
                        logger.warning(f"üõë Trailing stop d√©clench√© pour {token_address} (profit: {profit_percent:.2f}%)")
                        snipes_to_close.append((snipe_id, "trailing_stop"))
                    else:
                        logger.warning(f"üõë Stop loss d√©clench√© pour {token_address} (perte: {profit_percent:.2f}%)")
                        snipes_to_close.append((snipe_id, "stop_loss"))
                    continue
                
                # V√©rifier la sortie d'urgence
                emergency_threshold = self.config["risk_management"].get("emergency_exit_threshold", -30)
                if profit_percent <= emergency_threshold:
                    logger.error(f"üö® Sortie d'urgence pour {token_address} (perte: {profit_percent:.2f}%)")
                    snipes_to_close.append((snipe_id, "emergency_exit"))
                    continue
                
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la gestion du snipe {snipe_id}: {str(e)}")
        
        # Fermer les snipes qui ont atteint le take profit ou le stop loss
        for snipe_id, reason in snipes_to_close:
            await self._close_snipe(snipe_id, reason)
        
        # Planifier la prochaine v√©rification
        if self.active_snipes:
            await asyncio.sleep(5)  # V√©rifier toutes les 5 secondes
            asyncio.create_task(self._manage_active_snipes())
    
    async def _close_snipe(self, snipe_id: str, reason: str):
        """
        Ferme un snipe actif
        
        Args:
            snipe_id: ID du snipe √† fermer
            reason: Raison de la fermeture (take_profit, stop_loss)
        """
        snipe = self.active_snipes[snipe_id]
        
        try:
            logger.info(f"üîÑ Fermeture du snipe {snipe_id} pour raison: {reason}")
            
            # Pr√©parer la transaction de vente
            sell_tx = await self._prepare_swap_transaction(
                snipe["token_address"],
                snipe["base_token"],
                None,  # Vendre tout le solde
                snipe["router_address"]
            )
            
            if not sell_tx:
                logger.error(f"‚ùå Impossible de pr√©parer la transaction de vente pour {snipe_id}")
                return
            
            # Envoyer la transaction avec priorit√© √©lev√©e
            tx_hash = await self.blockchain.send_transaction(
                to=snipe["router_address"],
                data=sell_tx["data"],
                value=sell_tx["value"],
                priority=self.config["gas_priority"]
            )
            
            if not tx_hash:
                logger.error(f"‚ùå √âchec de l'envoi de la transaction de vente pour {snipe_id}")
                return
            
            logger.success(f"‚úÖ Transaction de vente envoy√©e: {tx_hash}")
            
            # Mettre √† jour le statut du snipe
            self.active_snipes[snipe_id]["status"] = "closed"
            self.active_snipes[snipe_id]["exit_time"] = time.time()
            self.active_snipes[snipe_id]["exit_tx_hash"] = tx_hash
            self.active_snipes[snipe_id]["exit_reason"] = reason
            
            # Calculer et enregistrer les performances
            # TODO: Impl√©menter le calcul des performances
            
            # Supprimer le snipe de la liste des snipes actifs apr√®s un certain temps
            asyncio.create_task(self._cleanup_snipe(snipe_id))
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la fermeture du snipe {snipe_id}: {str(e)}")
    
    async def _cleanup_snipe(self, snipe_id: str):
        """
        Nettoie un snipe ferm√© apr√®s un certain temps
        
        Args:
            snipe_id: ID du snipe √† nettoyer
        """
        await asyncio.sleep(300)  # Attendre 5 minutes
        if snipe_id in self.active_snipes:
            del self.active_snipes[snipe_id]
            logger.debug(f"üßπ Snipe {snipe_id} supprim√© de la liste des snipes actifs")
    
    async def _prepare_swap_transaction(self, token_in: str, token_out: str, amount_in: Optional[float], router_address: str) -> Optional[Dict]:
        """
        Pr√©pare une transaction de swap
        
        Args:
            token_in: Adresse du token d'entr√©e
            token_out: Adresse du token de sortie
            amount_in: Montant √† √©changer (None pour tout le solde)
            router_address: Adresse du routeur
            
        Returns:
            Dictionnaire avec les donn√©es de transaction
        """
        # TODO: Impl√©menter la pr√©paration de transaction
        # Pour l'instant, retourner un mock pour le d√©veloppement
        return {
            "data": b'0x',  # Donn√©es de transaction encod√©es
            "value": Web3.to_wei(amount_in, "ether") if amount_in else 0  # Valeur en wei √† envoyer
        } 