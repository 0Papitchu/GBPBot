#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Exemple d'utilisation de l'IA pour analyser un token Solana

Ce script d√©montre comment utiliser le module d'intelligence artificielle
de GBPBot pour analyser un token sp√©cifique sur Solana et obtenir des
recommandations de trading bas√©es sur l'analyse.
"""

import os
import sys
import json
import logging
from typing import Dict, Any, Optional, cast

# Ajout du r√©pertoire parent au path pour permettre l'import des modules GBPBot
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from gbpbot.ai import create_ai_client
    from gbpbot.ai.market_analyzer import MarketAnalyzer
    # Import conditionnel pour √©viter les erreurs si le module n'existe pas
    try:
        from gbpbot.config.config_manager import ConfigManager
        HAS_CONFIG_MANAGER = True
    except ImportError:
        HAS_CONFIG_MANAGER = False
except ImportError:
    print("‚ùå Erreur d'importation des modules GBPBot. Assurez-vous que GBPBot est correctement install√©.")
    print("   Ex√©cutez 'pip install -e .' depuis le r√©pertoire racine du projet.")
    sys.exit(1)

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger("AI_DEMO")

# Exemple de donn√©es de token (normalement r√©cup√©r√©es depuis une API comme Solscan ou DexScreener)
SAMPLE_TOKEN_DATA = {
    "symbol": "BONK",
    "name": "Bonk",
    "address": "DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263",
    "price_usd": 0.000012,
    "price_change_24h": 15.3,  # En pourcentage
    "market_cap": 734000000,
    "fully_diluted_valuation": 950000000,
    "volume_24h": 120000000,
    "volume_change_24h": 45.7,  # En pourcentage
    "liquidity_usd": 56000000,
    "holders": 235000,
    "transactions_24h": 37500,
    "twitter_followers": 450000,
    "launch_date": "2022-12-25",
    "security_score": 85,  # Score sur 100
    "contract_verified": True,
    "liquidity_locked": True,
    "tax_buy": 0,
    "tax_sell": 0
}

def load_config() -> Dict[str, Any]:
    """Charge la configuration depuis le fichier de configuration GBPBot ou utilise des valeurs par d√©faut."""
    config = {
        "AI_PROVIDER": "openai",
        "AI_MODEL": "gpt-3.5-turbo",
        "AI_TEMPERATURE": 0.7,
        "OPENAI_API_KEY": os.environ.get("OPENAI_API_KEY", ""),
        "AI_LOCAL_MODEL_PATH": ""
    }
    
    # Si le ConfigManager est disponible, essayons de l'utiliser
    if HAS_CONFIG_MANAGER:
        try:
            # Utilisation s√©curis√©e de ConfigManager via les fonctions dict
            config_manager = ConfigManager()
            config_dict = config_manager.get_all_config() if hasattr(config_manager, 'get_all_config') else {}
            
            # Mettre √† jour les valeurs si elles existent dans la configuration
            if "AI_PROVIDER" in config_dict:
                config["AI_PROVIDER"] = config_dict["AI_PROVIDER"]
            if "AI_MODEL" in config_dict:
                config["AI_MODEL"] = config_dict["AI_MODEL"]
            if "AI_TEMPERATURE" in config_dict:
                config["AI_TEMPERATURE"] = float(config_dict["AI_TEMPERATURE"])
            if "OPENAI_API_KEY" in config_dict:
                config["OPENAI_API_KEY"] = config_dict["OPENAI_API_KEY"]
            if "AI_LOCAL_MODEL_PATH" in config_dict:
                config["AI_LOCAL_MODEL_PATH"] = config_dict["AI_LOCAL_MODEL_PATH"]
                
            logger.info("Configuration charg√©e avec succ√®s depuis ConfigManager")
        except Exception as e:
            logger.warning(f"Impossible de charger la configuration: {e}. Utilisation des valeurs par d√©faut.")
    
    return config

def get_token_data(symbol: str) -> Dict[str, Any]:
    """
    R√©cup√®re les donn√©es d'un token sp√©cifique.
    
    Dans un cas r√©el, cette fonction ferait des appels API √† Solscan, DexScreener, etc.
    Pour cette d√©mo, nous utilisons des donn√©es pr√©d√©finies.
    """
    logger.info(f"R√©cup√©ration des donn√©es pour le token {symbol}...")
    # Simulons un d√©lai r√©seau
    import time
    time.sleep(1)
    
    if symbol.upper() == "BONK":
        return SAMPLE_TOKEN_DATA
    else:
        # G√©n√©rons des donn√©es al√©atoires pour tout autre token
        import random
        return {
            "symbol": symbol.upper(),
            "name": f"{symbol.capitalize()} Token",
            "address": "Sx" + "".join(random.choices("0123456789abcdef", k=40)),
            "price_usd": random.uniform(0.00000001, 5),
            "price_change_24h": random.uniform(-30, 30),
            "market_cap": random.randint(10000, 1000000000),
            "fully_diluted_valuation": random.randint(10000, 2000000000),
            "volume_24h": random.randint(5000, 200000000),
            "volume_change_24h": random.uniform(-50, 100),
            "liquidity_usd": random.randint(1000, 100000000),
            "holders": random.randint(100, 500000),
            "transactions_24h": random.randint(100, 50000),
            "twitter_followers": random.randint(0, 1000000),
            "launch_date": f"2023-{random.randint(1, 12)}-{random.randint(1, 28)}",
            "security_score": random.randint(30, 100),
            "contract_verified": random.choice([True, True, True, False]),  # Plus probable d'√™tre v√©rifi√©
            "liquidity_locked": random.choice([True, True, False]),  # Plus probable d'√™tre verrouill√©
            "tax_buy": random.choice([0, 0, 0, 3, 5, 10]),  # Taxes possibles
            "tax_sell": random.choice([0, 0, 0, 3, 5, 10])  # Taxes possibles
        }

def format_analysis_results(analysis_result: Dict[str, Any]) -> None:
    """Affiche les r√©sultats d'analyse de mani√®re format√©e et color√©e."""
    # ANSI colors for terminal
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    RED = "\033[91m"
    BLUE = "\033[94m"
    BOLD = "\033[1m"
    RESET = "\033[0m"
    
    print(f"\n{BOLD}{'='*80}{RESET}")
    print(f"{BOLD}{BLUE}ü§ñ ANALYSE IA DU TOKEN: {analysis_result.get('symbol', 'N/A')}{RESET}")
    print(f"{BOLD}{'='*80}{RESET}")
    
    # Tendance
    trend = analysis_result.get('trend', 'neutre').lower()
    trend_color = GREEN if trend == 'haussi√®re' else RED if trend == 'baissi√®re' else YELLOW
    print(f"{BOLD}Tendance actuelle:{RESET} {trend_color}{trend}{RESET}")
    
    # Niveau de confiance
    confidence = analysis_result.get('confidence_level', 0)
    confidence_color = GREEN if confidence >= 70 else YELLOW if confidence >= 40 else RED
    print(f"{BOLD}Niveau de confiance:{RESET} {confidence_color}{confidence}%{RESET}")
    
    # Forces et faiblesses
    print(f"\n{BOLD}Forces:{RESET}")
    for strength in analysis_result.get('strengths', []):
        print(f"  {GREEN}‚úì{RESET} {strength}")
    
    print(f"\n{BOLD}Faiblesses:{RESET}")
    for weakness in analysis_result.get('weaknesses', []):
        print(f"  {RED}‚úó{RESET} {weakness}")
    
    # Opportunit√©s
    print(f"\n{BOLD}Opportunit√©s:{RESET}")
    for opportunity in analysis_result.get('opportunities', []):
        print(f"  {BLUE}‚Üí{RESET} {opportunity}")
    
    # Risques
    print(f"\n{BOLD}Risques:{RESET}")
    risk_level = analysis_result.get('risk_level', 'mod√©r√©').lower()
    risk_color = GREEN if risk_level == 'faible' else RED if risk_level == '√©lev√©' else YELLOW
    print(f"  {BOLD}Niveau de risque global:{RESET} {risk_color}{risk_level}{RESET}")
    
    for risk in analysis_result.get('risks', []):
        print(f"  {RED}!{RESET} {risk}")
    
    # Recommandations
    print(f"\n{BOLD}Recommandations:{RESET}")
    for recommendation in analysis_result.get('recommendations', []):
        print(f"  {BLUE}‚Ä¢{RESET} {recommendation}")
    
    # Pr√©diction de prix
    prediction = analysis_result.get('price_prediction', {})
    if prediction:
        direction = prediction.get('direction', 'stable')
        direction_color = GREEN if direction == 'hausse' else RED if direction == 'baisse' else YELLOW
        
        print(f"\n{BOLD}Pr√©diction de prix (24h):{RESET}")
        print(f"  {BOLD}Direction:{RESET} {direction_color}{direction}{RESET}")
        print(f"  {BOLD}Amplitude potentielle:{RESET} {prediction.get('amplitude', 'N/A')}%")
        print(f"  {BOLD}Facteurs cl√©s:{RESET} {prediction.get('key_factors', 'N/A')}")
    
    print(f"\n{BOLD}{'='*80}{RESET}")
    print(f"{BOLD}Note:{RESET} Cette analyse est g√©n√©r√©e par l'IA et ne constitue pas un conseil financier.")
    print(f"{BOLD}{'='*80}{RESET}\n")

async def analyze_token() -> None:
    """Fonction principale qui ex√©cute l'analyse de token."""
    # Chargement de la configuration
    config = load_config()
    
    # V√©rification de la cl√© API si OpenAI est utilis√©
    if config["AI_PROVIDER"] == "openai" and not config["OPENAI_API_KEY"]:
        logger.error("Aucune cl√© API OpenAI trouv√©e. D√©finissez la variable d'environnement OPENAI_API_KEY ou configurez-la dans GBPBot.")
        print("\nPour ex√©cuter cette d√©mo avec OpenAI, vous devez d√©finir une cl√© API:")
        print("1. Exportez la variable d'environnement: export OPENAI_API_KEY='votre-cl√©-api'")
        print("2. Ou configurez-la dans GBPBot via le menu de configuration")
        sys.exit(1)
    
    # Demander √† l'utilisateur quel token analyser
    token_symbol = input("Entrez le symbole du token √† analyser (ex: BONK, WIF, BOME): ").strip().upper()
    if not token_symbol:
        logger.error("Aucun symbole de token fourni.")
        return
    
    try:
        # R√©cup√©ration des donn√©es du token
        token_data = get_token_data(token_symbol)
        
        logger.info(f"Cr√©ation du client IA avec le fournisseur {config['AI_PROVIDER']}...")
        # Cr√©ation du client IA avec les param√®tres adapt√©s aux signatures de m√©thodes attendues
        ai_client = create_ai_client(
            provider=config["AI_PROVIDER"],
            openai_api_key=config["OPENAI_API_KEY"],
            model_name=config["AI_MODEL"],
            temperature=config["AI_TEMPERATURE"],
            local_model_path=config["AI_LOCAL_MODEL_PATH"]
        )
        
        if not ai_client:
            logger.error("Impossible de cr√©er le client IA. V√©rifiez votre configuration et vos d√©pendances.")
            return
        
        # Cr√©ation de l'analyseur de march√©
        logger.info("Initialisation de l'analyseur de march√©...")
        market_analyzer = MarketAnalyzer(ai_client=ai_client, config=config)
        
        # Analyse du token
        logger.info(f"Analyse du token {token_symbol} en cours...")
        analysis_result_coroutine = market_analyzer.analyze_token(token_data)
        
        # Pour ex√©cuter la coroutine, nous avons besoin d'un event loop
        import asyncio
        analysis_result = await analysis_result_coroutine
        
        # Affichage des r√©sultats
        format_analysis_results(analysis_result)
        
    except Exception as e:
        logger.error(f"Une erreur s'est produite lors de l'analyse: {e}")
        import traceback
        logger.debug(traceback.format_exc())

async def main() -> None:
    """Point d'entr√©e principal du script, g√®re l'ex√©cution asynchrone."""
    print(f"{'='*80}")
    print(f"ü§ñ D√âMO D'ANALYSE DE TOKEN AVEC L'IA DE GBPBOT")
    print(f"{'='*80}")
    print("Cette d√©mo montre comment utiliser l'IA int√©gr√©e dans GBPBot pour analyser")
    print("un token sp√©cifique sur Solana et obtenir des recommandations de trading.")
    print(f"{'='*80}\n")
    
    await analyze_token()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main()) 